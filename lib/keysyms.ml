type t = int

(* This file is autogenerated; please do not commit directly. *)

let _NoSymbol : t =                     0x000000  (* Special KeySym *)

(***********************************************************
Copyright 1987, 1994, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.


Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************)

(*
 * The "X11 Window System Protocol" standard defines in Appendix A the
 * keysym codes. These 29-bit integer values identify characters or
 * functions associated with each key (e.g., via the visible
 * engraving) of a keyboard layout. This file assigns mnemonic macro
 * names for these keysyms.
 *
 * This file is also compiled (by src/util/makekeys.c in libX11) into
 * hash tables that can be accessed with X11 library functions such as
 * XStringToKeysym() and XKeysymToString().
 *
 * Where a keysym corresponds one-to-one to an ISO 10646 / Unicode
 * character, this is noted in a comment that provides both the U+xxxx
 * Unicode position, as well as the official Unicode name of the
 * character.
 *
 * Where the correspondence is either not one-to-one or semantically
 * unclear, the Unicode position and name are enclosed in
 * parentheses. Such legacy keysyms should be considered deprecated
 * and are not recommended for use in future keyboard mappings.
 *
 * For any future extension of the keysyms with characters already
 * found in ISO 10646 / Unicode, the following algorithm shall be
 * used. The new keysym code position will simply be the character's
 * Unicode number plus 0x01000000. The keysym values in the range
 * 0x01000100 to 0x0110ffff are reserved to represent Unicode
 * characters in the range U+0100 to U+10FFFF.
 * 
 * While most newer Unicode-based X11 clients do already accept
 * Unicode-mapped keysyms in the range 0x01000100 to 0x0110ffff, it
 * will remain necessary for clients -- in the interest of
 * compatibility with existing servers -- to also understand the
 * existing legacy keysym values in the range 0x0100 to 0x20ff.
 *
 * Where several mnemonic names are defined for the same keysym in this
 * file, all but the first one listed should be considered deprecated.
 *
 * Before adding new keysyms, please do consider the following: In
 * addition to the keysym names defined in this file, the
 * XStringToKeysym() and XKeysymToString() functions will also handle
 * any keysym string of the form "U0020" to "U007E" and "U00A0" to
 * "U10FFFF" for all possible Unicode characters. In other words,
 * every possible Unicode character has already a keysym string
 * defined algorithmically, even if it is not listed here. Therefore,
 * defining an additional keysym macro is only necessary where a
 * non-hexadecimal mnemonic name is needed, or where the new keysym
 * does not represent any existing Unicode character.
 *
 * When adding new keysyms to this file, do not forget to also update the
 * following as needed:
 *
 *   - the mappings in src/KeyBind.c in the repo
 *     git://anongit.freedesktop.org/xorg/lib/libX11.git
 *
 *   - the protocol specification in specs/keysyms.xml
 *     in the repo git://anongit.freedesktop.org/xorg/proto/x11proto.git
 *
 *)

let _VoidSymbol : t =                   0xffffff  (* Void symbol *)

(*
 * TTY function keys, cleverly chosen to map to ASCII, for convenience of
 * programming, but could have been arbitrary (at the cost of lookup
 * tables in client code).
 *)

let _BackSpace : t =                      0xff08  (* Back space, back char *)
let _Tab : t =                            0xff09
let _Linefeed : t =                       0xff0a  (* Linefeed, LF *)
let _Clear : t =                          0xff0b
let _Return : t =                         0xff0d  (* Return, enter *)
let _Pause : t =                          0xff13  (* Pause, hold *)
let _Scroll_Lock : t =                    0xff14
let _Sys_Req : t =                        0xff15
let _Escape : t =                         0xff1b
let _Delete : t =                         0xffff  (* Delete, rubout *)



(* International & multi-key character composition *)

let _Multi_key : t =                      0xff20  (* Multi-key character compose *)
let _Codeinput : t =                      0xff37
let _SingleCandidate : t =                0xff3c
let _MultipleCandidate : t =              0xff3d
let _PreviousCandidate : t =              0xff3e

(* Japanese keyboard support *)

let _Kanji : t =                          0xff21  (* Kanji, Kanji convert *)
let _Muhenkan : t =                       0xff22  (* Cancel Conversion *)
let _Henkan_Mode : t =                    0xff23  (* Start/Stop Conversion *)
let _Henkan : t =                         0xff23  (* Alias for Henkan_Mode *)
let _Romaji : t =                         0xff24  (* to Romaji *)
let _Hiragana : t =                       0xff25  (* to Hiragana *)
let _Katakana : t =                       0xff26  (* to Katakana *)
let _Hiragana_Katakana : t =              0xff27  (* Hiragana/Katakana toggle *)
let _Zenkaku : t =                        0xff28  (* to Zenkaku *)
let _Hankaku : t =                        0xff29  (* to Hankaku *)
let _Zenkaku_Hankaku : t =                0xff2a  (* Zenkaku/Hankaku toggle *)
let _Touroku : t =                        0xff2b  (* Add to Dictionary *)
let _Massyo : t =                         0xff2c  (* Delete from Dictionary *)
let _Kana_Lock : t =                      0xff2d  (* Kana Lock *)
let _Kana_Shift : t =                     0xff2e  (* Kana Shift *)
let _Eisu_Shift : t =                     0xff2f  (* Alphanumeric Shift *)
let _Eisu_toggle : t =                    0xff30  (* Alphanumeric toggle *)
let _Kanji_Bangou : t =                   0xff37  (* Codeinput *)
let _Zen_Koho : t =                       0xff3d  (* Multiple/All Candidate(s) *)
let _Mae_Koho : t =                       0xff3e  (* Previous Candidate *)

(* 0xff31 thru 0xff3f are under XK_KOREAN *)

(* Cursor control & motion *)

let _Home : t =                           0xff50
let _Left : t =                           0xff51  (* Move left, left arrow *)
let _Up : t =                             0xff52  (* Move up, up arrow *)
let _Right : t =                          0xff53  (* Move right, right arrow *)
let _Down : t =                           0xff54  (* Move down, down arrow *)
let _Prior : t =                          0xff55  (* Prior, previous *)
let _Page_Up : t =                        0xff55
let _Next : t =                           0xff56  (* Next *)
let _Page_Down : t =                      0xff56
let _End : t =                            0xff57  (* EOL *)
let _Begin : t =                          0xff58  (* BOL *)


(* Misc functions *)

let _Select : t =                         0xff60  (* Select, mark *)
let _Print : t =                          0xff61
let _Execute : t =                        0xff62  (* Execute, run, do *)
let _Insert : t =                         0xff63  (* Insert, insert here *)
let _Undo : t =                           0xff65
let _Redo : t =                           0xff66  (* Redo, again *)
let _Menu : t =                           0xff67
let _Find : t =                           0xff68  (* Find, search *)
let _Cancel : t =                         0xff69  (* Cancel, stop, abort, exit *)
let _Help : t =                           0xff6a  (* Help *)
let _Break : t =                          0xff6b
let _Mode_switch : t =                    0xff7e  (* Character set switch *)
let _script_switch : t =                  0xff7e  (* Alias for mode_switch *)
let _Num_Lock : t =                       0xff7f

(* Keypad functions, keypad numbers cleverly chosen to map to ASCII *)

let _KP_Space : t =                       0xff80  (* Space *)
let _KP_Tab : t =                         0xff89
let _KP_Enter : t =                       0xff8d  (* Enter *)
let _KP_F1 : t =                          0xff91  (* PF1, KP_A, ... *)
let _KP_F2 : t =                          0xff92
let _KP_F3 : t =                          0xff93
let _KP_F4 : t =                          0xff94
let _KP_Home : t =                        0xff95
let _KP_Left : t =                        0xff96
let _KP_Up : t =                          0xff97
let _KP_Right : t =                       0xff98
let _KP_Down : t =                        0xff99
let _KP_Prior : t =                       0xff9a
let _KP_Page_Up : t =                     0xff9a
let _KP_Next : t =                        0xff9b
let _KP_Page_Down : t =                   0xff9b
let _KP_End : t =                         0xff9c
let _KP_Begin : t =                       0xff9d
let _KP_Insert : t =                      0xff9e
let _KP_Delete : t =                      0xff9f
let _KP_Equal : t =                       0xffbd  (* Equals *)
let _KP_Multiply : t =                    0xffaa
let _KP_Add : t =                         0xffab
let _KP_Separator : t =                   0xffac  (* Separator, often comma *)
let _KP_Subtract : t =                    0xffad
let _KP_Decimal : t =                     0xffae
let _KP_Divide : t =                      0xffaf

let _KP_0 : t =                           0xffb0
let _KP_1 : t =                           0xffb1
let _KP_2 : t =                           0xffb2
let _KP_3 : t =                           0xffb3
let _KP_4 : t =                           0xffb4
let _KP_5 : t =                           0xffb5
let _KP_6 : t =                           0xffb6
let _KP_7 : t =                           0xffb7
let _KP_8 : t =                           0xffb8
let _KP_9 : t =                           0xffb9



(*
 * Auxiliary functions; note the duplicate definitions for left and right
 * function keys;  Sun keyboards and a few other manufacturers have such
 * function key groups on the left and/or right sides of the keyboard.
 * We've not found a keyboard with more than 35 function keys total.
 *)

let _F1 : t =                             0xffbe
let _F2 : t =                             0xffbf
let _F3 : t =                             0xffc0
let _F4 : t =                             0xffc1
let _F5 : t =                             0xffc2
let _F6 : t =                             0xffc3
let _F7 : t =                             0xffc4
let _F8 : t =                             0xffc5
let _F9 : t =                             0xffc6
let _F10 : t =                            0xffc7
let _F11 : t =                            0xffc8
let _L1 : t =                             0xffc8
let _F12 : t =                            0xffc9
let _L2 : t =                             0xffc9
let _F13 : t =                            0xffca
let _L3 : t =                             0xffca
let _F14 : t =                            0xffcb
let _L4 : t =                             0xffcb
let _F15 : t =                            0xffcc
let _L5 : t =                             0xffcc
let _F16 : t =                            0xffcd
let _L6 : t =                             0xffcd
let _F17 : t =                            0xffce
let _L7 : t =                             0xffce
let _F18 : t =                            0xffcf
let _L8 : t =                             0xffcf
let _F19 : t =                            0xffd0
let _L9 : t =                             0xffd0
let _F20 : t =                            0xffd1
let _L10 : t =                            0xffd1
let _F21 : t =                            0xffd2
let _R1 : t =                             0xffd2
let _F22 : t =                            0xffd3
let _R2 : t =                             0xffd3
let _F23 : t =                            0xffd4
let _R3 : t =                             0xffd4
let _F24 : t =                            0xffd5
let _R4 : t =                             0xffd5
let _F25 : t =                            0xffd6
let _R5 : t =                             0xffd6
let _F26 : t =                            0xffd7
let _R6 : t =                             0xffd7
let _F27 : t =                            0xffd8
let _R7 : t =                             0xffd8
let _F28 : t =                            0xffd9
let _R8 : t =                             0xffd9
let _F29 : t =                            0xffda
let _R9 : t =                             0xffda
let _F30 : t =                            0xffdb
let _R10 : t =                            0xffdb
let _F31 : t =                            0xffdc
let _R11 : t =                            0xffdc
let _F32 : t =                            0xffdd
let _R12 : t =                            0xffdd
let _F33 : t =                            0xffde
let _R13 : t =                            0xffde
let _F34 : t =                            0xffdf
let _R14 : t =                            0xffdf
let _F35 : t =                            0xffe0
let _R15 : t =                            0xffe0

(* Modifiers *)

let _Shift_L : t =                        0xffe1  (* Left shift *)
let _Shift_R : t =                        0xffe2  (* Right shift *)
let _Control_L : t =                      0xffe3  (* Left control *)
let _Control_R : t =                      0xffe4  (* Right control *)
let _Caps_Lock : t =                      0xffe5  (* Caps lock *)
let _Shift_Lock : t =                     0xffe6  (* Shift lock *)

let _Meta_L : t =                         0xffe7  (* Left meta *)
let _Meta_R : t =                         0xffe8  (* Right meta *)
let _Alt_L : t =                          0xffe9  (* Left alt *)
let _Alt_R : t =                          0xffea  (* Right alt *)
let _Super_L : t =                        0xffeb  (* Left super *)
let _Super_R : t =                        0xffec  (* Right super *)
let _Hyper_L : t =                        0xffed  (* Left hyper *)
let _Hyper_R : t =                        0xffee  (* Right hyper *)

(*
 * Keyboard (XKB) Extension function and modifier keys
 * (from Appendix C of "The X Keyboard Extension: Protocol Specification")
 * Byte 3 = 0xfe
 *)

let _ISO_Lock : t =                       0xfe01
let _ISO_Level2_Latch : t =               0xfe02
let _ISO_Level3_Shift : t =               0xfe03
let _ISO_Level3_Latch : t =               0xfe04
let _ISO_Level3_Lock : t =                0xfe05
let _ISO_Level5_Shift : t =               0xfe11
let _ISO_Level5_Latch : t =               0xfe12
let _ISO_Level5_Lock : t =                0xfe13
let _ISO_Group_Shift : t =                0xff7e  (* Alias for mode_switch *)
let _ISO_Group_Latch : t =                0xfe06
let _ISO_Group_Lock : t =                 0xfe07
let _ISO_Next_Group : t =                 0xfe08
let _ISO_Next_Group_Lock : t =            0xfe09
let _ISO_Prev_Group : t =                 0xfe0a
let _ISO_Prev_Group_Lock : t =            0xfe0b
let _ISO_First_Group : t =                0xfe0c
let _ISO_First_Group_Lock : t =           0xfe0d
let _ISO_Last_Group : t =                 0xfe0e
let _ISO_Last_Group_Lock : t =            0xfe0f

let _ISO_Left_Tab : t =                   0xfe20
let _ISO_Move_Line_Up : t =               0xfe21
let _ISO_Move_Line_Down : t =             0xfe22
let _ISO_Partial_Line_Up : t =            0xfe23
let _ISO_Partial_Line_Down : t =          0xfe24
let _ISO_Partial_Space_Left : t =         0xfe25
let _ISO_Partial_Space_Right : t =        0xfe26
let _ISO_Set_Margin_Left : t =            0xfe27
let _ISO_Set_Margin_Right : t =           0xfe28
let _ISO_Release_Margin_Left : t =        0xfe29
let _ISO_Release_Margin_Right : t =       0xfe2a
let _ISO_Release_Both_Margins : t =       0xfe2b
let _ISO_Fast_Cursor_Left : t =           0xfe2c
let _ISO_Fast_Cursor_Right : t =          0xfe2d
let _ISO_Fast_Cursor_Up : t =             0xfe2e
let _ISO_Fast_Cursor_Down : t =           0xfe2f
let _ISO_Continuous_Underline : t =       0xfe30
let _ISO_Discontinuous_Underline : t =    0xfe31
let _ISO_Emphasize : t =                  0xfe32
let _ISO_Center_Object : t =              0xfe33
let _ISO_Enter : t =                      0xfe34

let _dead_grave : t =                     0xfe50
let _dead_acute : t =                     0xfe51
let _dead_circumflex : t =                0xfe52
let _dead_tilde : t =                     0xfe53
let _dead_perispomeni : t =               0xfe53  (* alias for dead_tilde *)
let _dead_macron : t =                    0xfe54
let _dead_breve : t =                     0xfe55
let _dead_abovedot : t =                  0xfe56
let _dead_diaeresis : t =                 0xfe57
let _dead_abovering : t =                 0xfe58
let _dead_doubleacute : t =               0xfe59
let _dead_caron : t =                     0xfe5a
let _dead_cedilla : t =                   0xfe5b
let _dead_ogonek : t =                    0xfe5c
let _dead_iota : t =                      0xfe5d
let _dead_voiced_sound : t =              0xfe5e
let _dead_semivoiced_sound : t =          0xfe5f
let _dead_belowdot : t =                  0xfe60
let _dead_hook : t =                      0xfe61
let _dead_horn : t =                      0xfe62
let _dead_stroke : t =                    0xfe63
let _dead_abovecomma : t =                0xfe64
let _dead_psili : t =                     0xfe64  (* alias for dead_abovecomma *)
let _dead_abovereversedcomma : t =        0xfe65
let _dead_dasia : t =                     0xfe65  (* alias for dead_abovereversedcomma *)
let _dead_doublegrave : t =               0xfe66
let _dead_belowring : t =                 0xfe67
let _dead_belowmacron : t =               0xfe68
let _dead_belowcircumflex : t =           0xfe69
let _dead_belowtilde : t =                0xfe6a
let _dead_belowbreve : t =                0xfe6b
let _dead_belowdiaeresis : t =            0xfe6c
let _dead_invertedbreve : t =             0xfe6d
let _dead_belowcomma : t =                0xfe6e
let _dead_currency : t =                  0xfe6f

(* extra dead elements for German T3 layout *)
let _dead_lowline : t =                   0xfe90
let _dead_aboveverticalline : t =         0xfe91
let _dead_belowverticalline : t =         0xfe92
let _dead_longsolidusoverlay : t =        0xfe93

(* dead vowels for universal syllable entry *)
let _dead_a : t =                         0xfe80
let _dead_A : t =                         0xfe81
let _dead_e : t =                         0xfe82
let _dead_E : t =                         0xfe83
let _dead_i : t =                         0xfe84
let _dead_I : t =                         0xfe85
let _dead_o : t =                         0xfe86
let _dead_O : t =                         0xfe87
let _dead_u : t =                         0xfe88
let _dead_U : t =                         0xfe89
let _dead_small_schwa : t =               0xfe8a
let _dead_capital_schwa : t =             0xfe8b

let _dead_greek : t =                     0xfe8c

let _First_Virtual_Screen : t =           0xfed0
let _Prev_Virtual_Screen : t =            0xfed1
let _Next_Virtual_Screen : t =            0xfed2
let _Last_Virtual_Screen : t =            0xfed4
let _Terminate_Server : t =               0xfed5

let _AccessX_Enable : t =                 0xfe70
let _AccessX_Feedback_Enable : t =        0xfe71
let _RepeatKeys_Enable : t =              0xfe72
let _SlowKeys_Enable : t =                0xfe73
let _BounceKeys_Enable : t =              0xfe74
let _StickyKeys_Enable : t =              0xfe75
let _MouseKeys_Enable : t =               0xfe76
let _MouseKeys_Accel_Enable : t =         0xfe77
let _Overlay1_Enable : t =                0xfe78
let _Overlay2_Enable : t =                0xfe79
let _AudibleBell_Enable : t =             0xfe7a

let _Pointer_Left : t =                   0xfee0
let _Pointer_Right : t =                  0xfee1
let _Pointer_Up : t =                     0xfee2
let _Pointer_Down : t =                   0xfee3
let _Pointer_UpLeft : t =                 0xfee4
let _Pointer_UpRight : t =                0xfee5
let _Pointer_DownLeft : t =               0xfee6
let _Pointer_DownRight : t =              0xfee7
let _Pointer_Button_Dflt : t =            0xfee8
let _Pointer_Button1 : t =                0xfee9
let _Pointer_Button2 : t =                0xfeea
let _Pointer_Button3 : t =                0xfeeb
let _Pointer_Button4 : t =                0xfeec
let _Pointer_Button5 : t =                0xfeed
let _Pointer_DblClick_Dflt : t =          0xfeee
let _Pointer_DblClick1 : t =              0xfeef
let _Pointer_DblClick2 : t =              0xfef0
let _Pointer_DblClick3 : t =              0xfef1
let _Pointer_DblClick4 : t =              0xfef2
let _Pointer_DblClick5 : t =              0xfef3
let _Pointer_Drag_Dflt : t =              0xfef4
let _Pointer_Drag1 : t =                  0xfef5
let _Pointer_Drag2 : t =                  0xfef6
let _Pointer_Drag3 : t =                  0xfef7
let _Pointer_Drag4 : t =                  0xfef8
let _Pointer_Drag5 : t =                  0xfefd

let _Pointer_EnableKeys : t =             0xfef9
let _Pointer_Accelerate : t =             0xfefa
let _Pointer_DfltBtnNext : t =            0xfefb
let _Pointer_DfltBtnPrev : t =            0xfefc

(* Single-Stroke Multiple-Character N-Graph Keysyms For The X Input Method *)

let _ch : t =                             0xfea0
let _Ch : t =                             0xfea1
let _CH : t =                             0xfea2
let _c_h : t =                            0xfea3
let _C_h : t =                            0xfea4
let _C_H : t =                            0xfea5


(*
 * 3270 Terminal Keys
 * Byte 3 = 0xfd
 *)

let _3270_Duplicate : t =                 0xfd01
let _3270_FieldMark : t =                 0xfd02
let _3270_Right2 : t =                    0xfd03
let _3270_Left2 : t =                     0xfd04
let _3270_BackTab : t =                   0xfd05
let _3270_EraseEOF : t =                  0xfd06
let _3270_EraseInput : t =                0xfd07
let _3270_Reset : t =                     0xfd08
let _3270_Quit : t =                      0xfd09
let _3270_PA1 : t =                       0xfd0a
let _3270_PA2 : t =                       0xfd0b
let _3270_PA3 : t =                       0xfd0c
let _3270_Test : t =                      0xfd0d
let _3270_Attn : t =                      0xfd0e
let _3270_CursorBlink : t =               0xfd0f
let _3270_AltCursor : t =                 0xfd10
let _3270_KeyClick : t =                  0xfd11
let _3270_Jump : t =                      0xfd12
let _3270_Ident : t =                     0xfd13
let _3270_Rule : t =                      0xfd14
let _3270_Copy : t =                      0xfd15
let _3270_Play : t =                      0xfd16
let _3270_Setup : t =                     0xfd17
let _3270_Record : t =                    0xfd18
let _3270_ChangeScreen : t =              0xfd19
let _3270_DeleteWord : t =                0xfd1a
let _3270_ExSelect : t =                  0xfd1b
let _3270_CursorSelect : t =              0xfd1c
let _3270_PrintScreen : t =               0xfd1d
let _3270_Enter : t =                     0xfd1e

(*
 * Latin 1
 * (ISO/IEC 8859-1 = Unicode U+0020..U+00FF)
 * Byte 3 = 0
 *)
let _space : t =                          0x0020  (* U+0020 SPACE *)
let _exclam : t =                         0x0021  (* U+0021 EXCLAMATION MARK *)
let _quotedbl : t =                       0x0022  (* U+0022 QUOTATION MARK *)
let _numbersign : t =                     0x0023  (* U+0023 NUMBER SIGN *)
let _dollar : t =                         0x0024  (* U+0024 DOLLAR SIGN *)
let _percent : t =                        0x0025  (* U+0025 PERCENT SIGN *)
let _ampersand : t =                      0x0026  (* U+0026 AMPERSAND *)
let _apostrophe : t =                     0x0027  (* U+0027 APOSTROPHE *)
let _quoteright : t =                     0x0027  (* deprecated *)
let _parenleft : t =                      0x0028  (* U+0028 LEFT PARENTHESIS *)
let _parenright : t =                     0x0029  (* U+0029 RIGHT PARENTHESIS *)
let _asterisk : t =                       0x002a  (* U+002A ASTERISK *)
let _plus : t =                           0x002b  (* U+002B PLUS SIGN *)
let _comma : t =                          0x002c  (* U+002C COMMA *)
let _minus : t =                          0x002d  (* U+002D HYPHEN-MINUS *)
let _period : t =                         0x002e  (* U+002E FULL STOP *)
let _slash : t =                          0x002f  (* U+002F SOLIDUS *)
let _0 : t =                              0x0030  (* U+0030 DIGIT ZERO *)
let _1 : t =                              0x0031  (* U+0031 DIGIT ONE *)
let _2 : t =                              0x0032  (* U+0032 DIGIT TWO *)
let _3 : t =                              0x0033  (* U+0033 DIGIT THREE *)
let _4 : t =                              0x0034  (* U+0034 DIGIT FOUR *)
let _5 : t =                              0x0035  (* U+0035 DIGIT FIVE *)
let _6 : t =                              0x0036  (* U+0036 DIGIT SIX *)
let _7 : t =                              0x0037  (* U+0037 DIGIT SEVEN *)
let _8 : t =                              0x0038  (* U+0038 DIGIT EIGHT *)
let _9 : t =                              0x0039  (* U+0039 DIGIT NINE *)
let _colon : t =                          0x003a  (* U+003A COLON *)
let _semicolon : t =                      0x003b  (* U+003B SEMICOLON *)
let _less : t =                           0x003c  (* U+003C LESS-THAN SIGN *)
let _equal : t =                          0x003d  (* U+003D EQUALS SIGN *)
let _greater : t =                        0x003e  (* U+003E GREATER-THAN SIGN *)
let _question : t =                       0x003f  (* U+003F QUESTION MARK *)
let _at : t =                             0x0040  (* U+0040 COMMERCIAL AT *)
let _A : t =                              0x0041  (* U+0041 LATIN CAPITAL LETTER A *)
let _B : t =                              0x0042  (* U+0042 LATIN CAPITAL LETTER B *)
let _C : t =                              0x0043  (* U+0043 LATIN CAPITAL LETTER C *)
let _D : t =                              0x0044  (* U+0044 LATIN CAPITAL LETTER D *)
let _E : t =                              0x0045  (* U+0045 LATIN CAPITAL LETTER E *)
let _F : t =                              0x0046  (* U+0046 LATIN CAPITAL LETTER F *)
let _G : t =                              0x0047  (* U+0047 LATIN CAPITAL LETTER G *)
let _H : t =                              0x0048  (* U+0048 LATIN CAPITAL LETTER H *)
let _I : t =                              0x0049  (* U+0049 LATIN CAPITAL LETTER I *)
let _J : t =                              0x004a  (* U+004A LATIN CAPITAL LETTER J *)
let _K : t =                              0x004b  (* U+004B LATIN CAPITAL LETTER K *)
let _L : t =                              0x004c  (* U+004C LATIN CAPITAL LETTER L *)
let _M : t =                              0x004d  (* U+004D LATIN CAPITAL LETTER M *)
let _N : t =                              0x004e  (* U+004E LATIN CAPITAL LETTER N *)
let _O : t =                              0x004f  (* U+004F LATIN CAPITAL LETTER O *)
let _P : t =                              0x0050  (* U+0050 LATIN CAPITAL LETTER P *)
let _Q : t =                              0x0051  (* U+0051 LATIN CAPITAL LETTER Q *)
let _R : t =                              0x0052  (* U+0052 LATIN CAPITAL LETTER R *)
let _S : t =                              0x0053  (* U+0053 LATIN CAPITAL LETTER S *)
let _T : t =                              0x0054  (* U+0054 LATIN CAPITAL LETTER T *)
let _U : t =                              0x0055  (* U+0055 LATIN CAPITAL LETTER U *)
let _V : t =                              0x0056  (* U+0056 LATIN CAPITAL LETTER V *)
let _W : t =                              0x0057  (* U+0057 LATIN CAPITAL LETTER W *)
let _X : t =                              0x0058  (* U+0058 LATIN CAPITAL LETTER X *)
let _Y : t =                              0x0059  (* U+0059 LATIN CAPITAL LETTER Y *)
let _Z : t =                              0x005a  (* U+005A LATIN CAPITAL LETTER Z *)
let _bracketleft : t =                    0x005b  (* U+005B LEFT SQUARE BRACKET *)
let _backslash : t =                      0x005c  (* U+005C REVERSE SOLIDUS *)
let _bracketright : t =                   0x005d  (* U+005D RIGHT SQUARE BRACKET *)
let _asciicircum : t =                    0x005e  (* U+005E CIRCUMFLEX ACCENT *)
let _underscore : t =                     0x005f  (* U+005F LOW LINE *)
let _grave : t =                          0x0060  (* U+0060 GRAVE ACCENT *)
let _quoteleft : t =                      0x0060  (* deprecated *)
let _a : t =                              0x0061  (* U+0061 LATIN SMALL LETTER A *)
let _b : t =                              0x0062  (* U+0062 LATIN SMALL LETTER B *)
let _c : t =                              0x0063  (* U+0063 LATIN SMALL LETTER C *)
let _d : t =                              0x0064  (* U+0064 LATIN SMALL LETTER D *)
let _e : t =                              0x0065  (* U+0065 LATIN SMALL LETTER E *)
let _f : t =                              0x0066  (* U+0066 LATIN SMALL LETTER F *)
let _g : t =                              0x0067  (* U+0067 LATIN SMALL LETTER G *)
let _h : t =                              0x0068  (* U+0068 LATIN SMALL LETTER H *)
let _i : t =                              0x0069  (* U+0069 LATIN SMALL LETTER I *)
let _j : t =                              0x006a  (* U+006A LATIN SMALL LETTER J *)
let _k : t =                              0x006b  (* U+006B LATIN SMALL LETTER K *)
let _l : t =                              0x006c  (* U+006C LATIN SMALL LETTER L *)
let _m : t =                              0x006d  (* U+006D LATIN SMALL LETTER M *)
let _n : t =                              0x006e  (* U+006E LATIN SMALL LETTER N *)
let _o : t =                              0x006f  (* U+006F LATIN SMALL LETTER O *)
let _p : t =                              0x0070  (* U+0070 LATIN SMALL LETTER P *)
let _q : t =                              0x0071  (* U+0071 LATIN SMALL LETTER Q *)
let _r : t =                              0x0072  (* U+0072 LATIN SMALL LETTER R *)
let _s : t =                              0x0073  (* U+0073 LATIN SMALL LETTER S *)
let _t : t =                              0x0074  (* U+0074 LATIN SMALL LETTER T *)
let _u : t =                              0x0075  (* U+0075 LATIN SMALL LETTER U *)
let _v : t =                              0x0076  (* U+0076 LATIN SMALL LETTER V *)
let _w : t =                              0x0077  (* U+0077 LATIN SMALL LETTER W *)
let _x : t =                              0x0078  (* U+0078 LATIN SMALL LETTER X *)
let _y : t =                              0x0079  (* U+0079 LATIN SMALL LETTER Y *)
let _z : t =                              0x007a  (* U+007A LATIN SMALL LETTER Z *)
let _braceleft : t =                      0x007b  (* U+007B LEFT CURLY BRACKET *)
let _bar : t =                            0x007c  (* U+007C VERTICAL LINE *)
let _braceright : t =                     0x007d  (* U+007D RIGHT CURLY BRACKET *)
let _asciitilde : t =                     0x007e  (* U+007E TILDE *)

let _nobreakspace : t =                   0x00a0  (* U+00A0 NO-BREAK SPACE *)
let _exclamdown : t =                     0x00a1  (* U+00A1 INVERTED EXCLAMATION MARK *)
let _cent : t =                           0x00a2  (* U+00A2 CENT SIGN *)
let _sterling : t =                       0x00a3  (* U+00A3 POUND SIGN *)
let _currency : t =                       0x00a4  (* U+00A4 CURRENCY SIGN *)
let _yen : t =                            0x00a5  (* U+00A5 YEN SIGN *)
let _brokenbar : t =                      0x00a6  (* U+00A6 BROKEN BAR *)
let _section : t =                        0x00a7  (* U+00A7 SECTION SIGN *)
let _diaeresis : t =                      0x00a8  (* U+00A8 DIAERESIS *)
let _copyright : t =                      0x00a9  (* U+00A9 COPYRIGHT SIGN *)
let _ordfeminine : t =                    0x00aa  (* U+00AA FEMININE ORDINAL INDICATOR *)
let _guillemotleft : t =                  0x00ab  (* U+00AB LEFT-POINTING DOUBLE ANGLE QUOTATION MARK *)
let _notsign : t =                        0x00ac  (* U+00AC NOT SIGN *)
let _hyphen : t =                         0x00ad  (* U+00AD SOFT HYPHEN *)
let _registered : t =                     0x00ae  (* U+00AE REGISTERED SIGN *)
let _macron : t =                         0x00af  (* U+00AF MACRON *)
let _degree : t =                         0x00b0  (* U+00B0 DEGREE SIGN *)
let _plusminus : t =                      0x00b1  (* U+00B1 PLUS-MINUS SIGN *)
let _twosuperior : t =                    0x00b2  (* U+00B2 SUPERSCRIPT TWO *)
let _threesuperior : t =                  0x00b3  (* U+00B3 SUPERSCRIPT THREE *)
let _acute : t =                          0x00b4  (* U+00B4 ACUTE ACCENT *)
let _mu : t =                             0x00b5  (* U+00B5 MICRO SIGN *)
let _paragraph : t =                      0x00b6  (* U+00B6 PILCROW SIGN *)
let _periodcentered : t =                 0x00b7  (* U+00B7 MIDDLE DOT *)
let _cedilla : t =                        0x00b8  (* U+00B8 CEDILLA *)
let _onesuperior : t =                    0x00b9  (* U+00B9 SUPERSCRIPT ONE *)
let _masculine : t =                      0x00ba  (* U+00BA MASCULINE ORDINAL INDICATOR *)
let _guillemotright : t =                 0x00bb  (* U+00BB RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK *)
let _onequarter : t =                     0x00bc  (* U+00BC VULGAR FRACTION ONE QUARTER *)
let _onehalf : t =                        0x00bd  (* U+00BD VULGAR FRACTION ONE HALF *)
let _threequarters : t =                  0x00be  (* U+00BE VULGAR FRACTION THREE QUARTERS *)
let _questiondown : t =                   0x00bf  (* U+00BF INVERTED QUESTION MARK *)
let _Agrave : t =                         0x00c0  (* U+00C0 LATIN CAPITAL LETTER A WITH GRAVE *)
let _Aacute : t =                         0x00c1  (* U+00C1 LATIN CAPITAL LETTER A WITH ACUTE *)
let _Acircumflex : t =                    0x00c2  (* U+00C2 LATIN CAPITAL LETTER A WITH CIRCUMFLEX *)
let _Atilde : t =                         0x00c3  (* U+00C3 LATIN CAPITAL LETTER A WITH TILDE *)
let _Adiaeresis : t =                     0x00c4  (* U+00C4 LATIN CAPITAL LETTER A WITH DIAERESIS *)
let _Aring : t =                          0x00c5  (* U+00C5 LATIN CAPITAL LETTER A WITH RING ABOVE *)
let _AE : t =                             0x00c6  (* U+00C6 LATIN CAPITAL LETTER AE *)
let _Ccedilla : t =                       0x00c7  (* U+00C7 LATIN CAPITAL LETTER C WITH CEDILLA *)
let _Egrave : t =                         0x00c8  (* U+00C8 LATIN CAPITAL LETTER E WITH GRAVE *)
let _Eacute : t =                         0x00c9  (* U+00C9 LATIN CAPITAL LETTER E WITH ACUTE *)
let _Ecircumflex : t =                    0x00ca  (* U+00CA LATIN CAPITAL LETTER E WITH CIRCUMFLEX *)
let _Ediaeresis : t =                     0x00cb  (* U+00CB LATIN CAPITAL LETTER E WITH DIAERESIS *)
let _Igrave : t =                         0x00cc  (* U+00CC LATIN CAPITAL LETTER I WITH GRAVE *)
let _Iacute : t =                         0x00cd  (* U+00CD LATIN CAPITAL LETTER I WITH ACUTE *)
let _Icircumflex : t =                    0x00ce  (* U+00CE LATIN CAPITAL LETTER I WITH CIRCUMFLEX *)
let _Idiaeresis : t =                     0x00cf  (* U+00CF LATIN CAPITAL LETTER I WITH DIAERESIS *)
let _ETH : t =                            0x00d0  (* U+00D0 LATIN CAPITAL LETTER ETH *)
let _Eth : t =                            0x00d0  (* deprecated *)
let _Ntilde : t =                         0x00d1  (* U+00D1 LATIN CAPITAL LETTER N WITH TILDE *)
let _Ograve : t =                         0x00d2  (* U+00D2 LATIN CAPITAL LETTER O WITH GRAVE *)
let _Oacute : t =                         0x00d3  (* U+00D3 LATIN CAPITAL LETTER O WITH ACUTE *)
let _Ocircumflex : t =                    0x00d4  (* U+00D4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX *)
let _Otilde : t =                         0x00d5  (* U+00D5 LATIN CAPITAL LETTER O WITH TILDE *)
let _Odiaeresis : t =                     0x00d6  (* U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS *)
let _multiply : t =                       0x00d7  (* U+00D7 MULTIPLICATION SIGN *)
let _Oslash : t =                         0x00d8  (* U+00D8 LATIN CAPITAL LETTER O WITH STROKE *)
let _Ooblique : t =                       0x00d8  (* U+00D8 LATIN CAPITAL LETTER O WITH STROKE *)
let _Ugrave : t =                         0x00d9  (* U+00D9 LATIN CAPITAL LETTER U WITH GRAVE *)
let _Uacute : t =                         0x00da  (* U+00DA LATIN CAPITAL LETTER U WITH ACUTE *)
let _Ucircumflex : t =                    0x00db  (* U+00DB LATIN CAPITAL LETTER U WITH CIRCUMFLEX *)
let _Udiaeresis : t =                     0x00dc  (* U+00DC LATIN CAPITAL LETTER U WITH DIAERESIS *)
let _Yacute : t =                         0x00dd  (* U+00DD LATIN CAPITAL LETTER Y WITH ACUTE *)
let _THORN : t =                          0x00de  (* U+00DE LATIN CAPITAL LETTER THORN *)
let _Thorn : t =                          0x00de  (* deprecated *)
let _ssharp : t =                         0x00df  (* U+00DF LATIN SMALL LETTER SHARP S *)
let _agrave : t =                         0x00e0  (* U+00E0 LATIN SMALL LETTER A WITH GRAVE *)
let _aacute : t =                         0x00e1  (* U+00E1 LATIN SMALL LETTER A WITH ACUTE *)
let _acircumflex : t =                    0x00e2  (* U+00E2 LATIN SMALL LETTER A WITH CIRCUMFLEX *)
let _atilde : t =                         0x00e3  (* U+00E3 LATIN SMALL LETTER A WITH TILDE *)
let _adiaeresis : t =                     0x00e4  (* U+00E4 LATIN SMALL LETTER A WITH DIAERESIS *)
let _aring : t =                          0x00e5  (* U+00E5 LATIN SMALL LETTER A WITH RING ABOVE *)
let _ae : t =                             0x00e6  (* U+00E6 LATIN SMALL LETTER AE *)
let _ccedilla : t =                       0x00e7  (* U+00E7 LATIN SMALL LETTER C WITH CEDILLA *)
let _egrave : t =                         0x00e8  (* U+00E8 LATIN SMALL LETTER E WITH GRAVE *)
let _eacute : t =                         0x00e9  (* U+00E9 LATIN SMALL LETTER E WITH ACUTE *)
let _ecircumflex : t =                    0x00ea  (* U+00EA LATIN SMALL LETTER E WITH CIRCUMFLEX *)
let _ediaeresis : t =                     0x00eb  (* U+00EB LATIN SMALL LETTER E WITH DIAERESIS *)
let _igrave : t =                         0x00ec  (* U+00EC LATIN SMALL LETTER I WITH GRAVE *)
let _iacute : t =                         0x00ed  (* U+00ED LATIN SMALL LETTER I WITH ACUTE *)
let _icircumflex : t =                    0x00ee  (* U+00EE LATIN SMALL LETTER I WITH CIRCUMFLEX *)
let _idiaeresis : t =                     0x00ef  (* U+00EF LATIN SMALL LETTER I WITH DIAERESIS *)
let _eth : t =                            0x00f0  (* U+00F0 LATIN SMALL LETTER ETH *)
let _ntilde : t =                         0x00f1  (* U+00F1 LATIN SMALL LETTER N WITH TILDE *)
let _ograve : t =                         0x00f2  (* U+00F2 LATIN SMALL LETTER O WITH GRAVE *)
let _oacute : t =                         0x00f3  (* U+00F3 LATIN SMALL LETTER O WITH ACUTE *)
let _ocircumflex : t =                    0x00f4  (* U+00F4 LATIN SMALL LETTER O WITH CIRCUMFLEX *)
let _otilde : t =                         0x00f5  (* U+00F5 LATIN SMALL LETTER O WITH TILDE *)
let _odiaeresis : t =                     0x00f6  (* U+00F6 LATIN SMALL LETTER O WITH DIAERESIS *)
let _division : t =                       0x00f7  (* U+00F7 DIVISION SIGN *)
let _oslash : t =                         0x00f8  (* U+00F8 LATIN SMALL LETTER O WITH STROKE *)
let _ooblique : t =                       0x00f8  (* U+00F8 LATIN SMALL LETTER O WITH STROKE *)
let _ugrave : t =                         0x00f9  (* U+00F9 LATIN SMALL LETTER U WITH GRAVE *)
let _uacute : t =                         0x00fa  (* U+00FA LATIN SMALL LETTER U WITH ACUTE *)
let _ucircumflex : t =                    0x00fb  (* U+00FB LATIN SMALL LETTER U WITH CIRCUMFLEX *)
let _udiaeresis : t =                     0x00fc  (* U+00FC LATIN SMALL LETTER U WITH DIAERESIS *)
let _yacute : t =                         0x00fd  (* U+00FD LATIN SMALL LETTER Y WITH ACUTE *)
let _thorn : t =                          0x00fe  (* U+00FE LATIN SMALL LETTER THORN *)
let _ydiaeresis : t =                     0x00ff  (* U+00FF LATIN SMALL LETTER Y WITH DIAERESIS *)

(*
 * Latin 2
 * Byte 3 = 1
 *)

let _Aogonek : t =                        0x01a1  (* U+0104 LATIN CAPITAL LETTER A WITH OGONEK *)
let _breve : t =                          0x01a2  (* U+02D8 BREVE *)
let _Lstroke : t =                        0x01a3  (* U+0141 LATIN CAPITAL LETTER L WITH STROKE *)
let _Lcaron : t =                         0x01a5  (* U+013D LATIN CAPITAL LETTER L WITH CARON *)
let _Sacute : t =                         0x01a6  (* U+015A LATIN CAPITAL LETTER S WITH ACUTE *)
let _Scaron : t =                         0x01a9  (* U+0160 LATIN CAPITAL LETTER S WITH CARON *)
let _Scedilla : t =                       0x01aa  (* U+015E LATIN CAPITAL LETTER S WITH CEDILLA *)
let _Tcaron : t =                         0x01ab  (* U+0164 LATIN CAPITAL LETTER T WITH CARON *)
let _Zacute : t =                         0x01ac  (* U+0179 LATIN CAPITAL LETTER Z WITH ACUTE *)
let _Zcaron : t =                         0x01ae  (* U+017D LATIN CAPITAL LETTER Z WITH CARON *)
let _Zabovedot : t =                      0x01af  (* U+017B LATIN CAPITAL LETTER Z WITH DOT ABOVE *)
let _aogonek : t =                        0x01b1  (* U+0105 LATIN SMALL LETTER A WITH OGONEK *)
let _ogonek : t =                         0x01b2  (* U+02DB OGONEK *)
let _lstroke : t =                        0x01b3  (* U+0142 LATIN SMALL LETTER L WITH STROKE *)
let _lcaron : t =                         0x01b5  (* U+013E LATIN SMALL LETTER L WITH CARON *)
let _sacute : t =                         0x01b6  (* U+015B LATIN SMALL LETTER S WITH ACUTE *)
let _caron : t =                          0x01b7  (* U+02C7 CARON *)
let _scaron : t =                         0x01b9  (* U+0161 LATIN SMALL LETTER S WITH CARON *)
let _scedilla : t =                       0x01ba  (* U+015F LATIN SMALL LETTER S WITH CEDILLA *)
let _tcaron : t =                         0x01bb  (* U+0165 LATIN SMALL LETTER T WITH CARON *)
let _zacute : t =                         0x01bc  (* U+017A LATIN SMALL LETTER Z WITH ACUTE *)
let _doubleacute : t =                    0x01bd  (* U+02DD DOUBLE ACUTE ACCENT *)
let _zcaron : t =                         0x01be  (* U+017E LATIN SMALL LETTER Z WITH CARON *)
let _zabovedot : t =                      0x01bf  (* U+017C LATIN SMALL LETTER Z WITH DOT ABOVE *)
let _Racute : t =                         0x01c0  (* U+0154 LATIN CAPITAL LETTER R WITH ACUTE *)
let _Abreve : t =                         0x01c3  (* U+0102 LATIN CAPITAL LETTER A WITH BREVE *)
let _Lacute : t =                         0x01c5  (* U+0139 LATIN CAPITAL LETTER L WITH ACUTE *)
let _Cacute : t =                         0x01c6  (* U+0106 LATIN CAPITAL LETTER C WITH ACUTE *)
let _Ccaron : t =                         0x01c8  (* U+010C LATIN CAPITAL LETTER C WITH CARON *)
let _Eogonek : t =                        0x01ca  (* U+0118 LATIN CAPITAL LETTER E WITH OGONEK *)
let _Ecaron : t =                         0x01cc  (* U+011A LATIN CAPITAL LETTER E WITH CARON *)
let _Dcaron : t =                         0x01cf  (* U+010E LATIN CAPITAL LETTER D WITH CARON *)
let _Dstroke : t =                        0x01d0  (* U+0110 LATIN CAPITAL LETTER D WITH STROKE *)
let _Nacute : t =                         0x01d1  (* U+0143 LATIN CAPITAL LETTER N WITH ACUTE *)
let _Ncaron : t =                         0x01d2  (* U+0147 LATIN CAPITAL LETTER N WITH CARON *)
let _Odoubleacute : t =                   0x01d5  (* U+0150 LATIN CAPITAL LETTER O WITH DOUBLE ACUTE *)
let _Rcaron : t =                         0x01d8  (* U+0158 LATIN CAPITAL LETTER R WITH CARON *)
let _Uring : t =                          0x01d9  (* U+016E LATIN CAPITAL LETTER U WITH RING ABOVE *)
let _Udoubleacute : t =                   0x01db  (* U+0170 LATIN CAPITAL LETTER U WITH DOUBLE ACUTE *)
let _Tcedilla : t =                       0x01de  (* U+0162 LATIN CAPITAL LETTER T WITH CEDILLA *)
let _racute : t =                         0x01e0  (* U+0155 LATIN SMALL LETTER R WITH ACUTE *)
let _abreve : t =                         0x01e3  (* U+0103 LATIN SMALL LETTER A WITH BREVE *)
let _lacute : t =                         0x01e5  (* U+013A LATIN SMALL LETTER L WITH ACUTE *)
let _cacute : t =                         0x01e6  (* U+0107 LATIN SMALL LETTER C WITH ACUTE *)
let _ccaron : t =                         0x01e8  (* U+010D LATIN SMALL LETTER C WITH CARON *)
let _eogonek : t =                        0x01ea  (* U+0119 LATIN SMALL LETTER E WITH OGONEK *)
let _ecaron : t =                         0x01ec  (* U+011B LATIN SMALL LETTER E WITH CARON *)
let _dcaron : t =                         0x01ef  (* U+010F LATIN SMALL LETTER D WITH CARON *)
let _dstroke : t =                        0x01f0  (* U+0111 LATIN SMALL LETTER D WITH STROKE *)
let _nacute : t =                         0x01f1  (* U+0144 LATIN SMALL LETTER N WITH ACUTE *)
let _ncaron : t =                         0x01f2  (* U+0148 LATIN SMALL LETTER N WITH CARON *)
let _odoubleacute : t =                   0x01f5  (* U+0151 LATIN SMALL LETTER O WITH DOUBLE ACUTE *)
let _rcaron : t =                         0x01f8  (* U+0159 LATIN SMALL LETTER R WITH CARON *)
let _uring : t =                          0x01f9  (* U+016F LATIN SMALL LETTER U WITH RING ABOVE *)
let _udoubleacute : t =                   0x01fb  (* U+0171 LATIN SMALL LETTER U WITH DOUBLE ACUTE *)
let _tcedilla : t =                       0x01fe  (* U+0163 LATIN SMALL LETTER T WITH CEDILLA *)
let _abovedot : t =                       0x01ff  (* U+02D9 DOT ABOVE *)

(*
 * Latin 3
 * Byte 3 = 2
 *)

let _Hstroke : t =                        0x02a1  (* U+0126 LATIN CAPITAL LETTER H WITH STROKE *)
let _Hcircumflex : t =                    0x02a6  (* U+0124 LATIN CAPITAL LETTER H WITH CIRCUMFLEX *)
let _Iabovedot : t =                      0x02a9  (* U+0130 LATIN CAPITAL LETTER I WITH DOT ABOVE *)
let _Gbreve : t =                         0x02ab  (* U+011E LATIN CAPITAL LETTER G WITH BREVE *)
let _Jcircumflex : t =                    0x02ac  (* U+0134 LATIN CAPITAL LETTER J WITH CIRCUMFLEX *)
let _hstroke : t =                        0x02b1  (* U+0127 LATIN SMALL LETTER H WITH STROKE *)
let _hcircumflex : t =                    0x02b6  (* U+0125 LATIN SMALL LETTER H WITH CIRCUMFLEX *)
let _idotless : t =                       0x02b9  (* U+0131 LATIN SMALL LETTER DOTLESS I *)
let _gbreve : t =                         0x02bb  (* U+011F LATIN SMALL LETTER G WITH BREVE *)
let _jcircumflex : t =                    0x02bc  (* U+0135 LATIN SMALL LETTER J WITH CIRCUMFLEX *)
let _Cabovedot : t =                      0x02c5  (* U+010A LATIN CAPITAL LETTER C WITH DOT ABOVE *)
let _Ccircumflex : t =                    0x02c6  (* U+0108 LATIN CAPITAL LETTER C WITH CIRCUMFLEX *)
let _Gabovedot : t =                      0x02d5  (* U+0120 LATIN CAPITAL LETTER G WITH DOT ABOVE *)
let _Gcircumflex : t =                    0x02d8  (* U+011C LATIN CAPITAL LETTER G WITH CIRCUMFLEX *)
let _Ubreve : t =                         0x02dd  (* U+016C LATIN CAPITAL LETTER U WITH BREVE *)
let _Scircumflex : t =                    0x02de  (* U+015C LATIN CAPITAL LETTER S WITH CIRCUMFLEX *)
let _cabovedot : t =                      0x02e5  (* U+010B LATIN SMALL LETTER C WITH DOT ABOVE *)
let _ccircumflex : t =                    0x02e6  (* U+0109 LATIN SMALL LETTER C WITH CIRCUMFLEX *)
let _gabovedot : t =                      0x02f5  (* U+0121 LATIN SMALL LETTER G WITH DOT ABOVE *)
let _gcircumflex : t =                    0x02f8  (* U+011D LATIN SMALL LETTER G WITH CIRCUMFLEX *)
let _ubreve : t =                         0x02fd  (* U+016D LATIN SMALL LETTER U WITH BREVE *)
let _scircumflex : t =                    0x02fe  (* U+015D LATIN SMALL LETTER S WITH CIRCUMFLEX *)


(*
 * Latin 4
 * Byte 3 = 3
 *)

let _kra : t =                            0x03a2  (* U+0138 LATIN SMALL LETTER KRA *)
let _kappa : t =                          0x03a2  (* deprecated *)
let _Rcedilla : t =                       0x03a3  (* U+0156 LATIN CAPITAL LETTER R WITH CEDILLA *)
let _Itilde : t =                         0x03a5  (* U+0128 LATIN CAPITAL LETTER I WITH TILDE *)
let _Lcedilla : t =                       0x03a6  (* U+013B LATIN CAPITAL LETTER L WITH CEDILLA *)
let _Emacron : t =                        0x03aa  (* U+0112 LATIN CAPITAL LETTER E WITH MACRON *)
let _Gcedilla : t =                       0x03ab  (* U+0122 LATIN CAPITAL LETTER G WITH CEDILLA *)
let _Tslash : t =                         0x03ac  (* U+0166 LATIN CAPITAL LETTER T WITH STROKE *)
let _rcedilla : t =                       0x03b3  (* U+0157 LATIN SMALL LETTER R WITH CEDILLA *)
let _itilde : t =                         0x03b5  (* U+0129 LATIN SMALL LETTER I WITH TILDE *)
let _lcedilla : t =                       0x03b6  (* U+013C LATIN SMALL LETTER L WITH CEDILLA *)
let _emacron : t =                        0x03ba  (* U+0113 LATIN SMALL LETTER E WITH MACRON *)
let _gcedilla : t =                       0x03bb  (* U+0123 LATIN SMALL LETTER G WITH CEDILLA *)
let _tslash : t =                         0x03bc  (* U+0167 LATIN SMALL LETTER T WITH STROKE *)
let _ENG : t =                            0x03bd  (* U+014A LATIN CAPITAL LETTER ENG *)
let _eng : t =                            0x03bf  (* U+014B LATIN SMALL LETTER ENG *)
let _Amacron : t =                        0x03c0  (* U+0100 LATIN CAPITAL LETTER A WITH MACRON *)
let _Iogonek : t =                        0x03c7  (* U+012E LATIN CAPITAL LETTER I WITH OGONEK *)
let _Eabovedot : t =                      0x03cc  (* U+0116 LATIN CAPITAL LETTER E WITH DOT ABOVE *)
let _Imacron : t =                        0x03cf  (* U+012A LATIN CAPITAL LETTER I WITH MACRON *)
let _Ncedilla : t =                       0x03d1  (* U+0145 LATIN CAPITAL LETTER N WITH CEDILLA *)
let _Omacron : t =                        0x03d2  (* U+014C LATIN CAPITAL LETTER O WITH MACRON *)
let _Kcedilla : t =                       0x03d3  (* U+0136 LATIN CAPITAL LETTER K WITH CEDILLA *)
let _Uogonek : t =                        0x03d9  (* U+0172 LATIN CAPITAL LETTER U WITH OGONEK *)
let _Utilde : t =                         0x03dd  (* U+0168 LATIN CAPITAL LETTER U WITH TILDE *)
let _Umacron : t =                        0x03de  (* U+016A LATIN CAPITAL LETTER U WITH MACRON *)
let _amacron : t =                        0x03e0  (* U+0101 LATIN SMALL LETTER A WITH MACRON *)
let _iogonek : t =                        0x03e7  (* U+012F LATIN SMALL LETTER I WITH OGONEK *)
let _eabovedot : t =                      0x03ec  (* U+0117 LATIN SMALL LETTER E WITH DOT ABOVE *)
let _imacron : t =                        0x03ef  (* U+012B LATIN SMALL LETTER I WITH MACRON *)
let _ncedilla : t =                       0x03f1  (* U+0146 LATIN SMALL LETTER N WITH CEDILLA *)
let _omacron : t =                        0x03f2  (* U+014D LATIN SMALL LETTER O WITH MACRON *)
let _kcedilla : t =                       0x03f3  (* U+0137 LATIN SMALL LETTER K WITH CEDILLA *)
let _uogonek : t =                        0x03f9  (* U+0173 LATIN SMALL LETTER U WITH OGONEK *)
let _utilde : t =                         0x03fd  (* U+0169 LATIN SMALL LETTER U WITH TILDE *)
let _umacron : t =                        0x03fe  (* U+016B LATIN SMALL LETTER U WITH MACRON *)

(*
 * Latin 8
 *)
let _Wcircumflex : t =                 0x1000174  (* U+0174 LATIN CAPITAL LETTER W WITH CIRCUMFLEX *)
let _wcircumflex : t =                 0x1000175  (* U+0175 LATIN SMALL LETTER W WITH CIRCUMFLEX *)
let _Ycircumflex : t =                 0x1000176  (* U+0176 LATIN CAPITAL LETTER Y WITH CIRCUMFLEX *)
let _ycircumflex : t =                 0x1000177  (* U+0177 LATIN SMALL LETTER Y WITH CIRCUMFLEX *)
let _Babovedot : t =                   0x1001e02  (* U+1E02 LATIN CAPITAL LETTER B WITH DOT ABOVE *)
let _babovedot : t =                   0x1001e03  (* U+1E03 LATIN SMALL LETTER B WITH DOT ABOVE *)
let _Dabovedot : t =                   0x1001e0a  (* U+1E0A LATIN CAPITAL LETTER D WITH DOT ABOVE *)
let _dabovedot : t =                   0x1001e0b  (* U+1E0B LATIN SMALL LETTER D WITH DOT ABOVE *)
let _Fabovedot : t =                   0x1001e1e  (* U+1E1E LATIN CAPITAL LETTER F WITH DOT ABOVE *)
let _fabovedot : t =                   0x1001e1f  (* U+1E1F LATIN SMALL LETTER F WITH DOT ABOVE *)
let _Mabovedot : t =                   0x1001e40  (* U+1E40 LATIN CAPITAL LETTER M WITH DOT ABOVE *)
let _mabovedot : t =                   0x1001e41  (* U+1E41 LATIN SMALL LETTER M WITH DOT ABOVE *)
let _Pabovedot : t =                   0x1001e56  (* U+1E56 LATIN CAPITAL LETTER P WITH DOT ABOVE *)
let _pabovedot : t =                   0x1001e57  (* U+1E57 LATIN SMALL LETTER P WITH DOT ABOVE *)
let _Sabovedot : t =                   0x1001e60  (* U+1E60 LATIN CAPITAL LETTER S WITH DOT ABOVE *)
let _sabovedot : t =                   0x1001e61  (* U+1E61 LATIN SMALL LETTER S WITH DOT ABOVE *)
let _Tabovedot : t =                   0x1001e6a  (* U+1E6A LATIN CAPITAL LETTER T WITH DOT ABOVE *)
let _tabovedot : t =                   0x1001e6b  (* U+1E6B LATIN SMALL LETTER T WITH DOT ABOVE *)
let _Wgrave : t =                      0x1001e80  (* U+1E80 LATIN CAPITAL LETTER W WITH GRAVE *)
let _wgrave : t =                      0x1001e81  (* U+1E81 LATIN SMALL LETTER W WITH GRAVE *)
let _Wacute : t =                      0x1001e82  (* U+1E82 LATIN CAPITAL LETTER W WITH ACUTE *)
let _wacute : t =                      0x1001e83  (* U+1E83 LATIN SMALL LETTER W WITH ACUTE *)
let _Wdiaeresis : t =                  0x1001e84  (* U+1E84 LATIN CAPITAL LETTER W WITH DIAERESIS *)
let _wdiaeresis : t =                  0x1001e85  (* U+1E85 LATIN SMALL LETTER W WITH DIAERESIS *)
let _Ygrave : t =                      0x1001ef2  (* U+1EF2 LATIN CAPITAL LETTER Y WITH GRAVE *)
let _ygrave : t =                      0x1001ef3  (* U+1EF3 LATIN SMALL LETTER Y WITH GRAVE *)

(*
 * Latin 9
 * Byte 3 = 0x13
 *)

let _OE : t =                             0x13bc  (* U+0152 LATIN CAPITAL LIGATURE OE *)
let _oe : t =                             0x13bd  (* U+0153 LATIN SMALL LIGATURE OE *)
let _Ydiaeresis : t =                     0x13be  (* U+0178 LATIN CAPITAL LETTER Y WITH DIAERESIS *)

(*
 * Katakana
 * Byte 3 = 4
 *)

let _overline : t =                       0x047e  (* U+203E OVERLINE *)
let _kana_fullstop : t =                  0x04a1  (* U+3002 IDEOGRAPHIC FULL STOP *)
let _kana_openingbracket : t =            0x04a2  (* U+300C LEFT CORNER BRACKET *)
let _kana_closingbracket : t =            0x04a3  (* U+300D RIGHT CORNER BRACKET *)
let _kana_comma : t =                     0x04a4  (* U+3001 IDEOGRAPHIC COMMA *)
let _kana_conjunctive : t =               0x04a5  (* U+30FB KATAKANA MIDDLE DOT *)
let _kana_middledot : t =                 0x04a5  (* deprecated *)
let _kana_WO : t =                        0x04a6  (* U+30F2 KATAKANA LETTER WO *)
let _kana_a : t =                         0x04a7  (* U+30A1 KATAKANA LETTER SMALL A *)
let _kana_i : t =                         0x04a8  (* U+30A3 KATAKANA LETTER SMALL I *)
let _kana_u : t =                         0x04a9  (* U+30A5 KATAKANA LETTER SMALL U *)
let _kana_e : t =                         0x04aa  (* U+30A7 KATAKANA LETTER SMALL E *)
let _kana_o : t =                         0x04ab  (* U+30A9 KATAKANA LETTER SMALL O *)
let _kana_ya : t =                        0x04ac  (* U+30E3 KATAKANA LETTER SMALL YA *)
let _kana_yu : t =                        0x04ad  (* U+30E5 KATAKANA LETTER SMALL YU *)
let _kana_yo : t =                        0x04ae  (* U+30E7 KATAKANA LETTER SMALL YO *)
let _kana_tsu : t =                       0x04af  (* U+30C3 KATAKANA LETTER SMALL TU *)
let _kana_tu : t =                        0x04af  (* deprecated *)
let _prolongedsound : t =                 0x04b0  (* U+30FC KATAKANA-HIRAGANA PROLONGED SOUND MARK *)
let _kana_A : t =                         0x04b1  (* U+30A2 KATAKANA LETTER A *)
let _kana_I : t =                         0x04b2  (* U+30A4 KATAKANA LETTER I *)
let _kana_U : t =                         0x04b3  (* U+30A6 KATAKANA LETTER U *)
let _kana_E : t =                         0x04b4  (* U+30A8 KATAKANA LETTER E *)
let _kana_O : t =                         0x04b5  (* U+30AA KATAKANA LETTER O *)
let _kana_KA : t =                        0x04b6  (* U+30AB KATAKANA LETTER KA *)
let _kana_KI : t =                        0x04b7  (* U+30AD KATAKANA LETTER KI *)
let _kana_KU : t =                        0x04b8  (* U+30AF KATAKANA LETTER KU *)
let _kana_KE : t =                        0x04b9  (* U+30B1 KATAKANA LETTER KE *)
let _kana_KO : t =                        0x04ba  (* U+30B3 KATAKANA LETTER KO *)
let _kana_SA : t =                        0x04bb  (* U+30B5 KATAKANA LETTER SA *)
let _kana_SHI : t =                       0x04bc  (* U+30B7 KATAKANA LETTER SI *)
let _kana_SU : t =                        0x04bd  (* U+30B9 KATAKANA LETTER SU *)
let _kana_SE : t =                        0x04be  (* U+30BB KATAKANA LETTER SE *)
let _kana_SO : t =                        0x04bf  (* U+30BD KATAKANA LETTER SO *)
let _kana_TA : t =                        0x04c0  (* U+30BF KATAKANA LETTER TA *)
let _kana_CHI : t =                       0x04c1  (* U+30C1 KATAKANA LETTER TI *)
let _kana_TI : t =                        0x04c1  (* deprecated *)
let _kana_TSU : t =                       0x04c2  (* U+30C4 KATAKANA LETTER TU *)
let _kana_TU : t =                        0x04c2  (* deprecated *)
let _kana_TE : t =                        0x04c3  (* U+30C6 KATAKANA LETTER TE *)
let _kana_TO : t =                        0x04c4  (* U+30C8 KATAKANA LETTER TO *)
let _kana_NA : t =                        0x04c5  (* U+30CA KATAKANA LETTER NA *)
let _kana_NI : t =                        0x04c6  (* U+30CB KATAKANA LETTER NI *)
let _kana_NU : t =                        0x04c7  (* U+30CC KATAKANA LETTER NU *)
let _kana_NE : t =                        0x04c8  (* U+30CD KATAKANA LETTER NE *)
let _kana_NO : t =                        0x04c9  (* U+30CE KATAKANA LETTER NO *)
let _kana_HA : t =                        0x04ca  (* U+30CF KATAKANA LETTER HA *)
let _kana_HI : t =                        0x04cb  (* U+30D2 KATAKANA LETTER HI *)
let _kana_FU : t =                        0x04cc  (* U+30D5 KATAKANA LETTER HU *)
let _kana_HU : t =                        0x04cc  (* deprecated *)
let _kana_HE : t =                        0x04cd  (* U+30D8 KATAKANA LETTER HE *)
let _kana_HO : t =                        0x04ce  (* U+30DB KATAKANA LETTER HO *)
let _kana_MA : t =                        0x04cf  (* U+30DE KATAKANA LETTER MA *)
let _kana_MI : t =                        0x04d0  (* U+30DF KATAKANA LETTER MI *)
let _kana_MU : t =                        0x04d1  (* U+30E0 KATAKANA LETTER MU *)
let _kana_ME : t =                        0x04d2  (* U+30E1 KATAKANA LETTER ME *)
let _kana_MO : t =                        0x04d3  (* U+30E2 KATAKANA LETTER MO *)
let _kana_YA : t =                        0x04d4  (* U+30E4 KATAKANA LETTER YA *)
let _kana_YU : t =                        0x04d5  (* U+30E6 KATAKANA LETTER YU *)
let _kana_YO : t =                        0x04d6  (* U+30E8 KATAKANA LETTER YO *)
let _kana_RA : t =                        0x04d7  (* U+30E9 KATAKANA LETTER RA *)
let _kana_RI : t =                        0x04d8  (* U+30EA KATAKANA LETTER RI *)
let _kana_RU : t =                        0x04d9  (* U+30EB KATAKANA LETTER RU *)
let _kana_RE : t =                        0x04da  (* U+30EC KATAKANA LETTER RE *)
let _kana_RO : t =                        0x04db  (* U+30ED KATAKANA LETTER RO *)
let _kana_WA : t =                        0x04dc  (* U+30EF KATAKANA LETTER WA *)
let _kana_N : t =                         0x04dd  (* U+30F3 KATAKANA LETTER N *)
let _voicedsound : t =                    0x04de  (* U+309B KATAKANA-HIRAGANA VOICED SOUND MARK *)
let _semivoicedsound : t =                0x04df  (* U+309C KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK *)
let _kana_switch : t =                    0xff7e  (* Alias for mode_switch *)

(*
 * Arabic
 * Byte 3 = 5
 *)

let _Farsi_0 : t =                     0x10006f0  (* U+06F0 EXTENDED ARABIC-INDIC DIGIT ZERO *)
let _Farsi_1 : t =                     0x10006f1  (* U+06F1 EXTENDED ARABIC-INDIC DIGIT ONE *)
let _Farsi_2 : t =                     0x10006f2  (* U+06F2 EXTENDED ARABIC-INDIC DIGIT TWO *)
let _Farsi_3 : t =                     0x10006f3  (* U+06F3 EXTENDED ARABIC-INDIC DIGIT THREE *)
let _Farsi_4 : t =                     0x10006f4  (* U+06F4 EXTENDED ARABIC-INDIC DIGIT FOUR *)
let _Farsi_5 : t =                     0x10006f5  (* U+06F5 EXTENDED ARABIC-INDIC DIGIT FIVE *)
let _Farsi_6 : t =                     0x10006f6  (* U+06F6 EXTENDED ARABIC-INDIC DIGIT SIX *)
let _Farsi_7 : t =                     0x10006f7  (* U+06F7 EXTENDED ARABIC-INDIC DIGIT SEVEN *)
let _Farsi_8 : t =                     0x10006f8  (* U+06F8 EXTENDED ARABIC-INDIC DIGIT EIGHT *)
let _Farsi_9 : t =                     0x10006f9  (* U+06F9 EXTENDED ARABIC-INDIC DIGIT NINE *)
let _Arabic_percent : t =              0x100066a  (* U+066A ARABIC PERCENT SIGN *)
let _Arabic_superscript_alef : t =     0x1000670  (* U+0670 ARABIC LETTER SUPERSCRIPT ALEF *)
let _Arabic_tteh : t =                 0x1000679  (* U+0679 ARABIC LETTER TTEH *)
let _Arabic_peh : t =                  0x100067e  (* U+067E ARABIC LETTER PEH *)
let _Arabic_tcheh : t =                0x1000686  (* U+0686 ARABIC LETTER TCHEH *)
let _Arabic_ddal : t =                 0x1000688  (* U+0688 ARABIC LETTER DDAL *)
let _Arabic_rreh : t =                 0x1000691  (* U+0691 ARABIC LETTER RREH *)
let _Arabic_comma : t =                   0x05ac  (* U+060C ARABIC COMMA *)
let _Arabic_fullstop : t =             0x10006d4  (* U+06D4 ARABIC FULL STOP *)
let _Arabic_0 : t =                    0x1000660  (* U+0660 ARABIC-INDIC DIGIT ZERO *)
let _Arabic_1 : t =                    0x1000661  (* U+0661 ARABIC-INDIC DIGIT ONE *)
let _Arabic_2 : t =                    0x1000662  (* U+0662 ARABIC-INDIC DIGIT TWO *)
let _Arabic_3 : t =                    0x1000663  (* U+0663 ARABIC-INDIC DIGIT THREE *)
let _Arabic_4 : t =                    0x1000664  (* U+0664 ARABIC-INDIC DIGIT FOUR *)
let _Arabic_5 : t =                    0x1000665  (* U+0665 ARABIC-INDIC DIGIT FIVE *)
let _Arabic_6 : t =                    0x1000666  (* U+0666 ARABIC-INDIC DIGIT SIX *)
let _Arabic_7 : t =                    0x1000667  (* U+0667 ARABIC-INDIC DIGIT SEVEN *)
let _Arabic_8 : t =                    0x1000668  (* U+0668 ARABIC-INDIC DIGIT EIGHT *)
let _Arabic_9 : t =                    0x1000669  (* U+0669 ARABIC-INDIC DIGIT NINE *)
let _Arabic_semicolon : t =               0x05bb  (* U+061B ARABIC SEMICOLON *)
let _Arabic_question_mark : t =           0x05bf  (* U+061F ARABIC QUESTION MARK *)
let _Arabic_hamza : t =                   0x05c1  (* U+0621 ARABIC LETTER HAMZA *)
let _Arabic_maddaonalef : t =             0x05c2  (* U+0622 ARABIC LETTER ALEF WITH MADDA ABOVE *)
let _Arabic_hamzaonalef : t =             0x05c3  (* U+0623 ARABIC LETTER ALEF WITH HAMZA ABOVE *)
let _Arabic_hamzaonwaw : t =              0x05c4  (* U+0624 ARABIC LETTER WAW WITH HAMZA ABOVE *)
let _Arabic_hamzaunderalef : t =          0x05c5  (* U+0625 ARABIC LETTER ALEF WITH HAMZA BELOW *)
let _Arabic_hamzaonyeh : t =              0x05c6  (* U+0626 ARABIC LETTER YEH WITH HAMZA ABOVE *)
let _Arabic_alef : t =                    0x05c7  (* U+0627 ARABIC LETTER ALEF *)
let _Arabic_beh : t =                     0x05c8  (* U+0628 ARABIC LETTER BEH *)
let _Arabic_tehmarbuta : t =              0x05c9  (* U+0629 ARABIC LETTER TEH MARBUTA *)
let _Arabic_teh : t =                     0x05ca  (* U+062A ARABIC LETTER TEH *)
let _Arabic_theh : t =                    0x05cb  (* U+062B ARABIC LETTER THEH *)
let _Arabic_jeem : t =                    0x05cc  (* U+062C ARABIC LETTER JEEM *)
let _Arabic_hah : t =                     0x05cd  (* U+062D ARABIC LETTER HAH *)
let _Arabic_khah : t =                    0x05ce  (* U+062E ARABIC LETTER KHAH *)
let _Arabic_dal : t =                     0x05cf  (* U+062F ARABIC LETTER DAL *)
let _Arabic_thal : t =                    0x05d0  (* U+0630 ARABIC LETTER THAL *)
let _Arabic_ra : t =                      0x05d1  (* U+0631 ARABIC LETTER REH *)
let _Arabic_zain : t =                    0x05d2  (* U+0632 ARABIC LETTER ZAIN *)
let _Arabic_seen : t =                    0x05d3  (* U+0633 ARABIC LETTER SEEN *)
let _Arabic_sheen : t =                   0x05d4  (* U+0634 ARABIC LETTER SHEEN *)
let _Arabic_sad : t =                     0x05d5  (* U+0635 ARABIC LETTER SAD *)
let _Arabic_dad : t =                     0x05d6  (* U+0636 ARABIC LETTER DAD *)
let _Arabic_tah : t =                     0x05d7  (* U+0637 ARABIC LETTER TAH *)
let _Arabic_zah : t =                     0x05d8  (* U+0638 ARABIC LETTER ZAH *)
let _Arabic_ain : t =                     0x05d9  (* U+0639 ARABIC LETTER AIN *)
let _Arabic_ghain : t =                   0x05da  (* U+063A ARABIC LETTER GHAIN *)
let _Arabic_tatweel : t =                 0x05e0  (* U+0640 ARABIC TATWEEL *)
let _Arabic_feh : t =                     0x05e1  (* U+0641 ARABIC LETTER FEH *)
let _Arabic_qaf : t =                     0x05e2  (* U+0642 ARABIC LETTER QAF *)
let _Arabic_kaf : t =                     0x05e3  (* U+0643 ARABIC LETTER KAF *)
let _Arabic_lam : t =                     0x05e4  (* U+0644 ARABIC LETTER LAM *)
let _Arabic_meem : t =                    0x05e5  (* U+0645 ARABIC LETTER MEEM *)
let _Arabic_noon : t =                    0x05e6  (* U+0646 ARABIC LETTER NOON *)
let _Arabic_ha : t =                      0x05e7  (* U+0647 ARABIC LETTER HEH *)
let _Arabic_heh : t =                     0x05e7  (* deprecated *)
let _Arabic_waw : t =                     0x05e8  (* U+0648 ARABIC LETTER WAW *)
let _Arabic_alefmaksura : t =             0x05e9  (* U+0649 ARABIC LETTER ALEF MAKSURA *)
let _Arabic_yeh : t =                     0x05ea  (* U+064A ARABIC LETTER YEH *)
let _Arabic_fathatan : t =                0x05eb  (* U+064B ARABIC FATHATAN *)
let _Arabic_dammatan : t =                0x05ec  (* U+064C ARABIC DAMMATAN *)
let _Arabic_kasratan : t =                0x05ed  (* U+064D ARABIC KASRATAN *)
let _Arabic_fatha : t =                   0x05ee  (* U+064E ARABIC FATHA *)
let _Arabic_damma : t =                   0x05ef  (* U+064F ARABIC DAMMA *)
let _Arabic_kasra : t =                   0x05f0  (* U+0650 ARABIC KASRA *)
let _Arabic_shadda : t =                  0x05f1  (* U+0651 ARABIC SHADDA *)
let _Arabic_sukun : t =                   0x05f2  (* U+0652 ARABIC SUKUN *)
let _Arabic_madda_above : t =          0x1000653  (* U+0653 ARABIC MADDAH ABOVE *)
let _Arabic_hamza_above : t =          0x1000654  (* U+0654 ARABIC HAMZA ABOVE *)
let _Arabic_hamza_below : t =          0x1000655  (* U+0655 ARABIC HAMZA BELOW *)
let _Arabic_jeh : t =                  0x1000698  (* U+0698 ARABIC LETTER JEH *)
let _Arabic_veh : t =                  0x10006a4  (* U+06A4 ARABIC LETTER VEH *)
let _Arabic_keheh : t =                0x10006a9  (* U+06A9 ARABIC LETTER KEHEH *)
let _Arabic_gaf : t =                  0x10006af  (* U+06AF ARABIC LETTER GAF *)
let _Arabic_noon_ghunna : t =          0x10006ba  (* U+06BA ARABIC LETTER NOON GHUNNA *)
let _Arabic_heh_doachashmee : t =      0x10006be  (* U+06BE ARABIC LETTER HEH DOACHASHMEE *)
let _Farsi_yeh : t =                   0x10006cc  (* U+06CC ARABIC LETTER FARSI YEH *)
let _Arabic_farsi_yeh : t =            0x10006cc  (* U+06CC ARABIC LETTER FARSI YEH *)
let _Arabic_yeh_baree : t =            0x10006d2  (* U+06D2 ARABIC LETTER YEH BARREE *)
let _Arabic_heh_goal : t =             0x10006c1  (* U+06C1 ARABIC LETTER HEH GOAL *)
let _Arabic_switch : t =                  0xff7e  (* Alias for mode_switch *)

(*
 * Cyrillic
 * Byte 3 = 6
 *)
let _Cyrillic_GHE_bar : t =            0x1000492  (* U+0492 CYRILLIC CAPITAL LETTER GHE WITH STROKE *)
let _Cyrillic_ghe_bar : t =            0x1000493  (* U+0493 CYRILLIC SMALL LETTER GHE WITH STROKE *)
let _Cyrillic_ZHE_descender : t =      0x1000496  (* U+0496 CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER *)
let _Cyrillic_zhe_descender : t =      0x1000497  (* U+0497 CYRILLIC SMALL LETTER ZHE WITH DESCENDER *)
let _Cyrillic_KA_descender : t =       0x100049a  (* U+049A CYRILLIC CAPITAL LETTER KA WITH DESCENDER *)
let _Cyrillic_ka_descender : t =       0x100049b  (* U+049B CYRILLIC SMALL LETTER KA WITH DESCENDER *)
let _Cyrillic_KA_vertstroke : t =      0x100049c  (* U+049C CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE *)
let _Cyrillic_ka_vertstroke : t =      0x100049d  (* U+049D CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE *)
let _Cyrillic_EN_descender : t =       0x10004a2  (* U+04A2 CYRILLIC CAPITAL LETTER EN WITH DESCENDER *)
let _Cyrillic_en_descender : t =       0x10004a3  (* U+04A3 CYRILLIC SMALL LETTER EN WITH DESCENDER *)
let _Cyrillic_U_straight : t =         0x10004ae  (* U+04AE CYRILLIC CAPITAL LETTER STRAIGHT U *)
let _Cyrillic_u_straight : t =         0x10004af  (* U+04AF CYRILLIC SMALL LETTER STRAIGHT U *)
let _Cyrillic_U_straight_bar : t =     0x10004b0  (* U+04B0 CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE *)
let _Cyrillic_u_straight_bar : t =     0x10004b1  (* U+04B1 CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE *)
let _Cyrillic_HA_descender : t =       0x10004b2  (* U+04B2 CYRILLIC CAPITAL LETTER HA WITH DESCENDER *)
let _Cyrillic_ha_descender : t =       0x10004b3  (* U+04B3 CYRILLIC SMALL LETTER HA WITH DESCENDER *)
let _Cyrillic_CHE_descender : t =      0x10004b6  (* U+04B6 CYRILLIC CAPITAL LETTER CHE WITH DESCENDER *)
let _Cyrillic_che_descender : t =      0x10004b7  (* U+04B7 CYRILLIC SMALL LETTER CHE WITH DESCENDER *)
let _Cyrillic_CHE_vertstroke : t =     0x10004b8  (* U+04B8 CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE *)
let _Cyrillic_che_vertstroke : t =     0x10004b9  (* U+04B9 CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE *)
let _Cyrillic_SHHA : t =               0x10004ba  (* U+04BA CYRILLIC CAPITAL LETTER SHHA *)
let _Cyrillic_shha : t =               0x10004bb  (* U+04BB CYRILLIC SMALL LETTER SHHA *)

let _Cyrillic_SCHWA : t =              0x10004d8  (* U+04D8 CYRILLIC CAPITAL LETTER SCHWA *)
let _Cyrillic_schwa : t =              0x10004d9  (* U+04D9 CYRILLIC SMALL LETTER SCHWA *)
let _Cyrillic_I_macron : t =           0x10004e2  (* U+04E2 CYRILLIC CAPITAL LETTER I WITH MACRON *)
let _Cyrillic_i_macron : t =           0x10004e3  (* U+04E3 CYRILLIC SMALL LETTER I WITH MACRON *)
let _Cyrillic_O_bar : t =              0x10004e8  (* U+04E8 CYRILLIC CAPITAL LETTER BARRED O *)
let _Cyrillic_o_bar : t =              0x10004e9  (* U+04E9 CYRILLIC SMALL LETTER BARRED O *)
let _Cyrillic_U_macron : t =           0x10004ee  (* U+04EE CYRILLIC CAPITAL LETTER U WITH MACRON *)
let _Cyrillic_u_macron : t =           0x10004ef  (* U+04EF CYRILLIC SMALL LETTER U WITH MACRON *)

let _Serbian_dje : t =                    0x06a1  (* U+0452 CYRILLIC SMALL LETTER DJE *)
let _Macedonia_gje : t =                  0x06a2  (* U+0453 CYRILLIC SMALL LETTER GJE *)
let _Cyrillic_io : t =                    0x06a3  (* U+0451 CYRILLIC SMALL LETTER IO *)
let _Ukrainian_ie : t =                   0x06a4  (* U+0454 CYRILLIC SMALL LETTER UKRAINIAN IE *)
let _Ukranian_je : t =                    0x06a4  (* deprecated *)
let _Macedonia_dse : t =                  0x06a5  (* U+0455 CYRILLIC SMALL LETTER DZE *)
let _Ukrainian_i : t =                    0x06a6  (* U+0456 CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I *)
let _Ukranian_i : t =                     0x06a6  (* deprecated *)
let _Ukrainian_yi : t =                   0x06a7  (* U+0457 CYRILLIC SMALL LETTER YI *)
let _Ukranian_yi : t =                    0x06a7  (* deprecated *)
let _Cyrillic_je : t =                    0x06a8  (* U+0458 CYRILLIC SMALL LETTER JE *)
let _Serbian_je : t =                     0x06a8  (* deprecated *)
let _Cyrillic_lje : t =                   0x06a9  (* U+0459 CYRILLIC SMALL LETTER LJE *)
let _Serbian_lje : t =                    0x06a9  (* deprecated *)
let _Cyrillic_nje : t =                   0x06aa  (* U+045A CYRILLIC SMALL LETTER NJE *)
let _Serbian_nje : t =                    0x06aa  (* deprecated *)
let _Serbian_tshe : t =                   0x06ab  (* U+045B CYRILLIC SMALL LETTER TSHE *)
let _Macedonia_kje : t =                  0x06ac  (* U+045C CYRILLIC SMALL LETTER KJE *)
let _Ukrainian_ghe_with_upturn : t =      0x06ad  (* U+0491 CYRILLIC SMALL LETTER GHE WITH UPTURN *)
let _Byelorussian_shortu : t =            0x06ae  (* U+045E CYRILLIC SMALL LETTER SHORT U *)
let _Cyrillic_dzhe : t =                  0x06af  (* U+045F CYRILLIC SMALL LETTER DZHE *)
let _Serbian_dze : t =                    0x06af  (* deprecated *)
let _numerosign : t =                     0x06b0  (* U+2116 NUMERO SIGN *)
let _Serbian_DJE : t =                    0x06b1  (* U+0402 CYRILLIC CAPITAL LETTER DJE *)
let _Macedonia_GJE : t =                  0x06b2  (* U+0403 CYRILLIC CAPITAL LETTER GJE *)
let _Cyrillic_IO : t =                    0x06b3  (* U+0401 CYRILLIC CAPITAL LETTER IO *)
let _Ukrainian_IE : t =                   0x06b4  (* U+0404 CYRILLIC CAPITAL LETTER UKRAINIAN IE *)
let _Ukranian_JE : t =                    0x06b4  (* deprecated *)
let _Macedonia_DSE : t =                  0x06b5  (* U+0405 CYRILLIC CAPITAL LETTER DZE *)
let _Ukrainian_I : t =                    0x06b6  (* U+0406 CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I *)
let _Ukranian_I : t =                     0x06b6  (* deprecated *)
let _Ukrainian_YI : t =                   0x06b7  (* U+0407 CYRILLIC CAPITAL LETTER YI *)
let _Ukranian_YI : t =                    0x06b7  (* deprecated *)
let _Cyrillic_JE : t =                    0x06b8  (* U+0408 CYRILLIC CAPITAL LETTER JE *)
let _Serbian_JE : t =                     0x06b8  (* deprecated *)
let _Cyrillic_LJE : t =                   0x06b9  (* U+0409 CYRILLIC CAPITAL LETTER LJE *)
let _Serbian_LJE : t =                    0x06b9  (* deprecated *)
let _Cyrillic_NJE : t =                   0x06ba  (* U+040A CYRILLIC CAPITAL LETTER NJE *)
let _Serbian_NJE : t =                    0x06ba  (* deprecated *)
let _Serbian_TSHE : t =                   0x06bb  (* U+040B CYRILLIC CAPITAL LETTER TSHE *)
let _Macedonia_KJE : t =                  0x06bc  (* U+040C CYRILLIC CAPITAL LETTER KJE *)
let _Ukrainian_GHE_WITH_UPTURN : t =      0x06bd  (* U+0490 CYRILLIC CAPITAL LETTER GHE WITH UPTURN *)
let _Byelorussian_SHORTU : t =            0x06be  (* U+040E CYRILLIC CAPITAL LETTER SHORT U *)
let _Cyrillic_DZHE : t =                  0x06bf  (* U+040F CYRILLIC CAPITAL LETTER DZHE *)
let _Serbian_DZE : t =                    0x06bf  (* deprecated *)
let _Cyrillic_yu : t =                    0x06c0  (* U+044E CYRILLIC SMALL LETTER YU *)
let _Cyrillic_a : t =                     0x06c1  (* U+0430 CYRILLIC SMALL LETTER A *)
let _Cyrillic_be : t =                    0x06c2  (* U+0431 CYRILLIC SMALL LETTER BE *)
let _Cyrillic_tse : t =                   0x06c3  (* U+0446 CYRILLIC SMALL LETTER TSE *)
let _Cyrillic_de : t =                    0x06c4  (* U+0434 CYRILLIC SMALL LETTER DE *)
let _Cyrillic_ie : t =                    0x06c5  (* U+0435 CYRILLIC SMALL LETTER IE *)
let _Cyrillic_ef : t =                    0x06c6  (* U+0444 CYRILLIC SMALL LETTER EF *)
let _Cyrillic_ghe : t =                   0x06c7  (* U+0433 CYRILLIC SMALL LETTER GHE *)
let _Cyrillic_ha : t =                    0x06c8  (* U+0445 CYRILLIC SMALL LETTER HA *)
let _Cyrillic_i : t =                     0x06c9  (* U+0438 CYRILLIC SMALL LETTER I *)
let _Cyrillic_shorti : t =                0x06ca  (* U+0439 CYRILLIC SMALL LETTER SHORT I *)
let _Cyrillic_ka : t =                    0x06cb  (* U+043A CYRILLIC SMALL LETTER KA *)
let _Cyrillic_el : t =                    0x06cc  (* U+043B CYRILLIC SMALL LETTER EL *)
let _Cyrillic_em : t =                    0x06cd  (* U+043C CYRILLIC SMALL LETTER EM *)
let _Cyrillic_en : t =                    0x06ce  (* U+043D CYRILLIC SMALL LETTER EN *)
let _Cyrillic_o : t =                     0x06cf  (* U+043E CYRILLIC SMALL LETTER O *)
let _Cyrillic_pe : t =                    0x06d0  (* U+043F CYRILLIC SMALL LETTER PE *)
let _Cyrillic_ya : t =                    0x06d1  (* U+044F CYRILLIC SMALL LETTER YA *)
let _Cyrillic_er : t =                    0x06d2  (* U+0440 CYRILLIC SMALL LETTER ER *)
let _Cyrillic_es : t =                    0x06d3  (* U+0441 CYRILLIC SMALL LETTER ES *)
let _Cyrillic_te : t =                    0x06d4  (* U+0442 CYRILLIC SMALL LETTER TE *)
let _Cyrillic_u : t =                     0x06d5  (* U+0443 CYRILLIC SMALL LETTER U *)
let _Cyrillic_zhe : t =                   0x06d6  (* U+0436 CYRILLIC SMALL LETTER ZHE *)
let _Cyrillic_ve : t =                    0x06d7  (* U+0432 CYRILLIC SMALL LETTER VE *)
let _Cyrillic_softsign : t =              0x06d8  (* U+044C CYRILLIC SMALL LETTER SOFT SIGN *)
let _Cyrillic_yeru : t =                  0x06d9  (* U+044B CYRILLIC SMALL LETTER YERU *)
let _Cyrillic_ze : t =                    0x06da  (* U+0437 CYRILLIC SMALL LETTER ZE *)
let _Cyrillic_sha : t =                   0x06db  (* U+0448 CYRILLIC SMALL LETTER SHA *)
let _Cyrillic_e : t =                     0x06dc  (* U+044D CYRILLIC SMALL LETTER E *)
let _Cyrillic_shcha : t =                 0x06dd  (* U+0449 CYRILLIC SMALL LETTER SHCHA *)
let _Cyrillic_che : t =                   0x06de  (* U+0447 CYRILLIC SMALL LETTER CHE *)
let _Cyrillic_hardsign : t =              0x06df  (* U+044A CYRILLIC SMALL LETTER HARD SIGN *)
let _Cyrillic_YU : t =                    0x06e0  (* U+042E CYRILLIC CAPITAL LETTER YU *)
let _Cyrillic_A : t =                     0x06e1  (* U+0410 CYRILLIC CAPITAL LETTER A *)
let _Cyrillic_BE : t =                    0x06e2  (* U+0411 CYRILLIC CAPITAL LETTER BE *)
let _Cyrillic_TSE : t =                   0x06e3  (* U+0426 CYRILLIC CAPITAL LETTER TSE *)
let _Cyrillic_DE : t =                    0x06e4  (* U+0414 CYRILLIC CAPITAL LETTER DE *)
let _Cyrillic_IE : t =                    0x06e5  (* U+0415 CYRILLIC CAPITAL LETTER IE *)
let _Cyrillic_EF : t =                    0x06e6  (* U+0424 CYRILLIC CAPITAL LETTER EF *)
let _Cyrillic_GHE : t =                   0x06e7  (* U+0413 CYRILLIC CAPITAL LETTER GHE *)
let _Cyrillic_HA : t =                    0x06e8  (* U+0425 CYRILLIC CAPITAL LETTER HA *)
let _Cyrillic_I : t =                     0x06e9  (* U+0418 CYRILLIC CAPITAL LETTER I *)
let _Cyrillic_SHORTI : t =                0x06ea  (* U+0419 CYRILLIC CAPITAL LETTER SHORT I *)
let _Cyrillic_KA : t =                    0x06eb  (* U+041A CYRILLIC CAPITAL LETTER KA *)
let _Cyrillic_EL : t =                    0x06ec  (* U+041B CYRILLIC CAPITAL LETTER EL *)
let _Cyrillic_EM : t =                    0x06ed  (* U+041C CYRILLIC CAPITAL LETTER EM *)
let _Cyrillic_EN : t =                    0x06ee  (* U+041D CYRILLIC CAPITAL LETTER EN *)
let _Cyrillic_O : t =                     0x06ef  (* U+041E CYRILLIC CAPITAL LETTER O *)
let _Cyrillic_PE : t =                    0x06f0  (* U+041F CYRILLIC CAPITAL LETTER PE *)
let _Cyrillic_YA : t =                    0x06f1  (* U+042F CYRILLIC CAPITAL LETTER YA *)
let _Cyrillic_ER : t =                    0x06f2  (* U+0420 CYRILLIC CAPITAL LETTER ER *)
let _Cyrillic_ES : t =                    0x06f3  (* U+0421 CYRILLIC CAPITAL LETTER ES *)
let _Cyrillic_TE : t =                    0x06f4  (* U+0422 CYRILLIC CAPITAL LETTER TE *)
let _Cyrillic_U : t =                     0x06f5  (* U+0423 CYRILLIC CAPITAL LETTER U *)
let _Cyrillic_ZHE : t =                   0x06f6  (* U+0416 CYRILLIC CAPITAL LETTER ZHE *)
let _Cyrillic_VE : t =                    0x06f7  (* U+0412 CYRILLIC CAPITAL LETTER VE *)
let _Cyrillic_SOFTSIGN : t =              0x06f8  (* U+042C CYRILLIC CAPITAL LETTER SOFT SIGN *)
let _Cyrillic_YERU : t =                  0x06f9  (* U+042B CYRILLIC CAPITAL LETTER YERU *)
let _Cyrillic_ZE : t =                    0x06fa  (* U+0417 CYRILLIC CAPITAL LETTER ZE *)
let _Cyrillic_SHA : t =                   0x06fb  (* U+0428 CYRILLIC CAPITAL LETTER SHA *)
let _Cyrillic_E : t =                     0x06fc  (* U+042D CYRILLIC CAPITAL LETTER E *)
let _Cyrillic_SHCHA : t =                 0x06fd  (* U+0429 CYRILLIC CAPITAL LETTER SHCHA *)
let _Cyrillic_CHE : t =                   0x06fe  (* U+0427 CYRILLIC CAPITAL LETTER CHE *)
let _Cyrillic_HARDSIGN : t =              0x06ff  (* U+042A CYRILLIC CAPITAL LETTER HARD SIGN *)

(*
 * Greek
 * (based on an early draft of, and not quite identical to, ISO/IEC 8859-7)
 * Byte 3 = 7
 *)

let _Greek_ALPHAaccent : t =              0x07a1  (* U+0386 GREEK CAPITAL LETTER ALPHA WITH TONOS *)
let _Greek_EPSILONaccent : t =            0x07a2  (* U+0388 GREEK CAPITAL LETTER EPSILON WITH TONOS *)
let _Greek_ETAaccent : t =                0x07a3  (* U+0389 GREEK CAPITAL LETTER ETA WITH TONOS *)
let _Greek_IOTAaccent : t =               0x07a4  (* U+038A GREEK CAPITAL LETTER IOTA WITH TONOS *)
let _Greek_IOTAdieresis : t =             0x07a5  (* U+03AA GREEK CAPITAL LETTER IOTA WITH DIALYTIKA *)
let _Greek_IOTAdiaeresis : t =            0x07a5  (* old typo *)
let _Greek_OMICRONaccent : t =            0x07a7  (* U+038C GREEK CAPITAL LETTER OMICRON WITH TONOS *)
let _Greek_UPSILONaccent : t =            0x07a8  (* U+038E GREEK CAPITAL LETTER UPSILON WITH TONOS *)
let _Greek_UPSILONdieresis : t =          0x07a9  (* U+03AB GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA *)
let _Greek_OMEGAaccent : t =              0x07ab  (* U+038F GREEK CAPITAL LETTER OMEGA WITH TONOS *)
let _Greek_accentdieresis : t =           0x07ae  (* U+0385 GREEK DIALYTIKA TONOS *)
let _Greek_horizbar : t =                 0x07af  (* U+2015 HORIZONTAL BAR *)
let _Greek_alphaaccent : t =              0x07b1  (* U+03AC GREEK SMALL LETTER ALPHA WITH TONOS *)
let _Greek_epsilonaccent : t =            0x07b2  (* U+03AD GREEK SMALL LETTER EPSILON WITH TONOS *)
let _Greek_etaaccent : t =                0x07b3  (* U+03AE GREEK SMALL LETTER ETA WITH TONOS *)
let _Greek_iotaaccent : t =               0x07b4  (* U+03AF GREEK SMALL LETTER IOTA WITH TONOS *)
let _Greek_iotadieresis : t =             0x07b5  (* U+03CA GREEK SMALL LETTER IOTA WITH DIALYTIKA *)
let _Greek_iotaaccentdieresis : t =       0x07b6  (* U+0390 GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS *)
let _Greek_omicronaccent : t =            0x07b7  (* U+03CC GREEK SMALL LETTER OMICRON WITH TONOS *)
let _Greek_upsilonaccent : t =            0x07b8  (* U+03CD GREEK SMALL LETTER UPSILON WITH TONOS *)
let _Greek_upsilondieresis : t =          0x07b9  (* U+03CB GREEK SMALL LETTER UPSILON WITH DIALYTIKA *)
let _Greek_upsilonaccentdieresis : t =    0x07ba  (* U+03B0 GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS *)
let _Greek_omegaaccent : t =              0x07bb  (* U+03CE GREEK SMALL LETTER OMEGA WITH TONOS *)
let _Greek_ALPHA : t =                    0x07c1  (* U+0391 GREEK CAPITAL LETTER ALPHA *)
let _Greek_BETA : t =                     0x07c2  (* U+0392 GREEK CAPITAL LETTER BETA *)
let _Greek_GAMMA : t =                    0x07c3  (* U+0393 GREEK CAPITAL LETTER GAMMA *)
let _Greek_DELTA : t =                    0x07c4  (* U+0394 GREEK CAPITAL LETTER DELTA *)
let _Greek_EPSILON : t =                  0x07c5  (* U+0395 GREEK CAPITAL LETTER EPSILON *)
let _Greek_ZETA : t =                     0x07c6  (* U+0396 GREEK CAPITAL LETTER ZETA *)
let _Greek_ETA : t =                      0x07c7  (* U+0397 GREEK CAPITAL LETTER ETA *)
let _Greek_THETA : t =                    0x07c8  (* U+0398 GREEK CAPITAL LETTER THETA *)
let _Greek_IOTA : t =                     0x07c9  (* U+0399 GREEK CAPITAL LETTER IOTA *)
let _Greek_KAPPA : t =                    0x07ca  (* U+039A GREEK CAPITAL LETTER KAPPA *)
let _Greek_LAMDA : t =                    0x07cb  (* U+039B GREEK CAPITAL LETTER LAMDA *)
let _Greek_LAMBDA : t =                   0x07cb  (* U+039B GREEK CAPITAL LETTER LAMDA *)
let _Greek_MU : t =                       0x07cc  (* U+039C GREEK CAPITAL LETTER MU *)
let _Greek_NU : t =                       0x07cd  (* U+039D GREEK CAPITAL LETTER NU *)
let _Greek_XI : t =                       0x07ce  (* U+039E GREEK CAPITAL LETTER XI *)
let _Greek_OMICRON : t =                  0x07cf  (* U+039F GREEK CAPITAL LETTER OMICRON *)
let _Greek_PI : t =                       0x07d0  (* U+03A0 GREEK CAPITAL LETTER PI *)
let _Greek_RHO : t =                      0x07d1  (* U+03A1 GREEK CAPITAL LETTER RHO *)
let _Greek_SIGMA : t =                    0x07d2  (* U+03A3 GREEK CAPITAL LETTER SIGMA *)
let _Greek_TAU : t =                      0x07d4  (* U+03A4 GREEK CAPITAL LETTER TAU *)
let _Greek_UPSILON : t =                  0x07d5  (* U+03A5 GREEK CAPITAL LETTER UPSILON *)
let _Greek_PHI : t =                      0x07d6  (* U+03A6 GREEK CAPITAL LETTER PHI *)
let _Greek_CHI : t =                      0x07d7  (* U+03A7 GREEK CAPITAL LETTER CHI *)
let _Greek_PSI : t =                      0x07d8  (* U+03A8 GREEK CAPITAL LETTER PSI *)
let _Greek_OMEGA : t =                    0x07d9  (* U+03A9 GREEK CAPITAL LETTER OMEGA *)
let _Greek_alpha : t =                    0x07e1  (* U+03B1 GREEK SMALL LETTER ALPHA *)
let _Greek_beta : t =                     0x07e2  (* U+03B2 GREEK SMALL LETTER BETA *)
let _Greek_gamma : t =                    0x07e3  (* U+03B3 GREEK SMALL LETTER GAMMA *)
let _Greek_delta : t =                    0x07e4  (* U+03B4 GREEK SMALL LETTER DELTA *)
let _Greek_epsilon : t =                  0x07e5  (* U+03B5 GREEK SMALL LETTER EPSILON *)
let _Greek_zeta : t =                     0x07e6  (* U+03B6 GREEK SMALL LETTER ZETA *)
let _Greek_eta : t =                      0x07e7  (* U+03B7 GREEK SMALL LETTER ETA *)
let _Greek_theta : t =                    0x07e8  (* U+03B8 GREEK SMALL LETTER THETA *)
let _Greek_iota : t =                     0x07e9  (* U+03B9 GREEK SMALL LETTER IOTA *)
let _Greek_kappa : t =                    0x07ea  (* U+03BA GREEK SMALL LETTER KAPPA *)
let _Greek_lamda : t =                    0x07eb  (* U+03BB GREEK SMALL LETTER LAMDA *)
let _Greek_lambda : t =                   0x07eb  (* U+03BB GREEK SMALL LETTER LAMDA *)
let _Greek_mu : t =                       0x07ec  (* U+03BC GREEK SMALL LETTER MU *)
let _Greek_nu : t =                       0x07ed  (* U+03BD GREEK SMALL LETTER NU *)
let _Greek_xi : t =                       0x07ee  (* U+03BE GREEK SMALL LETTER XI *)
let _Greek_omicron : t =                  0x07ef  (* U+03BF GREEK SMALL LETTER OMICRON *)
let _Greek_pi : t =                       0x07f0  (* U+03C0 GREEK SMALL LETTER PI *)
let _Greek_rho : t =                      0x07f1  (* U+03C1 GREEK SMALL LETTER RHO *)
let _Greek_sigma : t =                    0x07f2  (* U+03C3 GREEK SMALL LETTER SIGMA *)
let _Greek_finalsmallsigma : t =          0x07f3  (* U+03C2 GREEK SMALL LETTER FINAL SIGMA *)
let _Greek_tau : t =                      0x07f4  (* U+03C4 GREEK SMALL LETTER TAU *)
let _Greek_upsilon : t =                  0x07f5  (* U+03C5 GREEK SMALL LETTER UPSILON *)
let _Greek_phi : t =                      0x07f6  (* U+03C6 GREEK SMALL LETTER PHI *)
let _Greek_chi : t =                      0x07f7  (* U+03C7 GREEK SMALL LETTER CHI *)
let _Greek_psi : t =                      0x07f8  (* U+03C8 GREEK SMALL LETTER PSI *)
let _Greek_omega : t =                    0x07f9  (* U+03C9 GREEK SMALL LETTER OMEGA *)
let _Greek_switch : t =                   0xff7e  (* Alias for mode_switch *)

(*
 * Technical
 * (from the DEC VT330/VT420 Technical Character Set, http://vt100.net/charsets/technical.html)
 * Byte 3 = 8
 *)

let _leftradical : t =                    0x08a1  (* U+23B7 RADICAL SYMBOL BOTTOM *)
let _topleftradical : t =                 0x08a2  (*(U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT)*)
let _horizconnector : t =                 0x08a3  (*(U+2500 BOX DRAWINGS LIGHT HORIZONTAL)*)
let _topintegral : t =                    0x08a4  (* U+2320 TOP HALF INTEGRAL *)
let _botintegral : t =                    0x08a5  (* U+2321 BOTTOM HALF INTEGRAL *)
let _vertconnector : t =                  0x08a6  (*(U+2502 BOX DRAWINGS LIGHT VERTICAL)*)
let _topleftsqbracket : t =               0x08a7  (* U+23A1 LEFT SQUARE BRACKET UPPER CORNER *)
let _botleftsqbracket : t =               0x08a8  (* U+23A3 LEFT SQUARE BRACKET LOWER CORNER *)
let _toprightsqbracket : t =              0x08a9  (* U+23A4 RIGHT SQUARE BRACKET UPPER CORNER *)
let _botrightsqbracket : t =              0x08aa  (* U+23A6 RIGHT SQUARE BRACKET LOWER CORNER *)
let _topleftparens : t =                  0x08ab  (* U+239B LEFT PARENTHESIS UPPER HOOK *)
let _botleftparens : t =                  0x08ac  (* U+239D LEFT PARENTHESIS LOWER HOOK *)
let _toprightparens : t =                 0x08ad  (* U+239E RIGHT PARENTHESIS UPPER HOOK *)
let _botrightparens : t =                 0x08ae  (* U+23A0 RIGHT PARENTHESIS LOWER HOOK *)
let _leftmiddlecurlybrace : t =           0x08af  (* U+23A8 LEFT CURLY BRACKET MIDDLE PIECE *)
let _rightmiddlecurlybrace : t =          0x08b0  (* U+23AC RIGHT CURLY BRACKET MIDDLE PIECE *)
let _topleftsummation : t =               0x08b1
let _botleftsummation : t =               0x08b2
let _topvertsummationconnector : t =      0x08b3
let _botvertsummationconnector : t =      0x08b4
let _toprightsummation : t =              0x08b5
let _botrightsummation : t =              0x08b6
let _rightmiddlesummation : t =           0x08b7
let _lessthanequal : t =                  0x08bc  (* U+2264 LESS-THAN OR EQUAL TO *)
let _notequal : t =                       0x08bd  (* U+2260 NOT EQUAL TO *)
let _greaterthanequal : t =               0x08be  (* U+2265 GREATER-THAN OR EQUAL TO *)
let _integral : t =                       0x08bf  (* U+222B INTEGRAL *)
let _therefore : t =                      0x08c0  (* U+2234 THEREFORE *)
let _variation : t =                      0x08c1  (* U+221D PROPORTIONAL TO *)
let _infinity : t =                       0x08c2  (* U+221E INFINITY *)
let _nabla : t =                          0x08c5  (* U+2207 NABLA *)
let _approximate : t =                    0x08c8  (* U+223C TILDE OPERATOR *)
let _similarequal : t =                   0x08c9  (* U+2243 ASYMPTOTICALLY EQUAL TO *)
let _ifonlyif : t =                       0x08cd  (* U+21D4 LEFT RIGHT DOUBLE ARROW *)
let _implies : t =                        0x08ce  (* U+21D2 RIGHTWARDS DOUBLE ARROW *)
let _identical : t =                      0x08cf  (* U+2261 IDENTICAL TO *)
let _radical : t =                        0x08d6  (* U+221A SQUARE ROOT *)
let _includedin : t =                     0x08da  (* U+2282 SUBSET OF *)
let _includes : t =                       0x08db  (* U+2283 SUPERSET OF *)
let _intersection : t =                   0x08dc  (* U+2229 INTERSECTION *)
let _union : t =                          0x08dd  (* U+222A UNION *)
let _logicaland : t =                     0x08de  (* U+2227 LOGICAL AND *)
let _logicalor : t =                      0x08df  (* U+2228 LOGICAL OR *)
let _partialderivative : t =              0x08ef  (* U+2202 PARTIAL DIFFERENTIAL *)
let _function : t =                       0x08f6  (* U+0192 LATIN SMALL LETTER F WITH HOOK *)
let _leftarrow : t =                      0x08fb  (* U+2190 LEFTWARDS ARROW *)
let _uparrow : t =                        0x08fc  (* U+2191 UPWARDS ARROW *)
let _rightarrow : t =                     0x08fd  (* U+2192 RIGHTWARDS ARROW *)
let _downarrow : t =                      0x08fe  (* U+2193 DOWNWARDS ARROW *)

(*
 * Special
 * (from the DEC VT100 Special Graphics Character Set)
 * Byte 3 = 9
 *)

let _blank : t =                          0x09df
let _soliddiamond : t =                   0x09e0  (* U+25C6 BLACK DIAMOND *)
let _checkerboard : t =                   0x09e1  (* U+2592 MEDIUM SHADE *)
let _ht : t =                             0x09e2  (* U+2409 SYMBOL FOR HORIZONTAL TABULATION *)
let _ff : t =                             0x09e3  (* U+240C SYMBOL FOR FORM FEED *)
let _cr : t =                             0x09e4  (* U+240D SYMBOL FOR CARRIAGE RETURN *)
let _lf : t =                             0x09e5  (* U+240A SYMBOL FOR LINE FEED *)
let _nl : t =                             0x09e8  (* U+2424 SYMBOL FOR NEWLINE *)
let _vt : t =                             0x09e9  (* U+240B SYMBOL FOR VERTICAL TABULATION *)
let _lowrightcorner : t =                 0x09ea  (* U+2518 BOX DRAWINGS LIGHT UP AND LEFT *)
let _uprightcorner : t =                  0x09eb  (* U+2510 BOX DRAWINGS LIGHT DOWN AND LEFT *)
let _upleftcorner : t =                   0x09ec  (* U+250C BOX DRAWINGS LIGHT DOWN AND RIGHT *)
let _lowleftcorner : t =                  0x09ed  (* U+2514 BOX DRAWINGS LIGHT UP AND RIGHT *)
let _crossinglines : t =                  0x09ee  (* U+253C BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL *)
let _horizlinescan1 : t =                 0x09ef  (* U+23BA HORIZONTAL SCAN LINE-1 *)
let _horizlinescan3 : t =                 0x09f0  (* U+23BB HORIZONTAL SCAN LINE-3 *)
let _horizlinescan5 : t =                 0x09f1  (* U+2500 BOX DRAWINGS LIGHT HORIZONTAL *)
let _horizlinescan7 : t =                 0x09f2  (* U+23BC HORIZONTAL SCAN LINE-7 *)
let _horizlinescan9 : t =                 0x09f3  (* U+23BD HORIZONTAL SCAN LINE-9 *)
let _leftt : t =                          0x09f4  (* U+251C BOX DRAWINGS LIGHT VERTICAL AND RIGHT *)
let _rightt : t =                         0x09f5  (* U+2524 BOX DRAWINGS LIGHT VERTICAL AND LEFT *)
let _bott : t =                           0x09f6  (* U+2534 BOX DRAWINGS LIGHT UP AND HORIZONTAL *)
let _topt : t =                           0x09f7  (* U+252C BOX DRAWINGS LIGHT DOWN AND HORIZONTAL *)
let _vertbar : t =                        0x09f8  (* U+2502 BOX DRAWINGS LIGHT VERTICAL *)

(*
 * Publishing
 * (these are probably from a long forgotten DEC Publishing
 * font that once shipped with DECwrite)
 * Byte 3 = 0x0a
 *)

let _emspace : t =                        0x0aa1  (* U+2003 EM SPACE *)
let _enspace : t =                        0x0aa2  (* U+2002 EN SPACE *)
let _em3space : t =                       0x0aa3  (* U+2004 THREE-PER-EM SPACE *)
let _em4space : t =                       0x0aa4  (* U+2005 FOUR-PER-EM SPACE *)
let _digitspace : t =                     0x0aa5  (* U+2007 FIGURE SPACE *)
let _punctspace : t =                     0x0aa6  (* U+2008 PUNCTUATION SPACE *)
let _thinspace : t =                      0x0aa7  (* U+2009 THIN SPACE *)
let _hairspace : t =                      0x0aa8  (* U+200A HAIR SPACE *)
let _emdash : t =                         0x0aa9  (* U+2014 EM DASH *)
let _endash : t =                         0x0aaa  (* U+2013 EN DASH *)
let _signifblank : t =                    0x0aac  (*(U+2423 OPEN BOX)*)
let _ellipsis : t =                       0x0aae  (* U+2026 HORIZONTAL ELLIPSIS *)
let _doubbaselinedot : t =                0x0aaf  (* U+2025 TWO DOT LEADER *)
let _onethird : t =                       0x0ab0  (* U+2153 VULGAR FRACTION ONE THIRD *)
let _twothirds : t =                      0x0ab1  (* U+2154 VULGAR FRACTION TWO THIRDS *)
let _onefifth : t =                       0x0ab2  (* U+2155 VULGAR FRACTION ONE FIFTH *)
let _twofifths : t =                      0x0ab3  (* U+2156 VULGAR FRACTION TWO FIFTHS *)
let _threefifths : t =                    0x0ab4  (* U+2157 VULGAR FRACTION THREE FIFTHS *)
let _fourfifths : t =                     0x0ab5  (* U+2158 VULGAR FRACTION FOUR FIFTHS *)
let _onesixth : t =                       0x0ab6  (* U+2159 VULGAR FRACTION ONE SIXTH *)
let _fivesixths : t =                     0x0ab7  (* U+215A VULGAR FRACTION FIVE SIXTHS *)
let _careof : t =                         0x0ab8  (* U+2105 CARE OF *)
let _figdash : t =                        0x0abb  (* U+2012 FIGURE DASH *)
let _leftanglebracket : t =               0x0abc  (*(U+27E8 MATHEMATICAL LEFT ANGLE BRACKET)*)
let _decimalpoint : t =                   0x0abd  (*(U+002E FULL STOP)*)
let _rightanglebracket : t =              0x0abe  (*(U+27E9 MATHEMATICAL RIGHT ANGLE BRACKET)*)
let _marker : t =                         0x0abf
let _oneeighth : t =                      0x0ac3  (* U+215B VULGAR FRACTION ONE EIGHTH *)
let _threeeighths : t =                   0x0ac4  (* U+215C VULGAR FRACTION THREE EIGHTHS *)
let _fiveeighths : t =                    0x0ac5  (* U+215D VULGAR FRACTION FIVE EIGHTHS *)
let _seveneighths : t =                   0x0ac6  (* U+215E VULGAR FRACTION SEVEN EIGHTHS *)
let _trademark : t =                      0x0ac9  (* U+2122 TRADE MARK SIGN *)
let _signaturemark : t =                  0x0aca  (*(U+2613 SALTIRE)*)
let _trademarkincircle : t =              0x0acb
let _leftopentriangle : t =               0x0acc  (*(U+25C1 WHITE LEFT-POINTING TRIANGLE)*)
let _rightopentriangle : t =              0x0acd  (*(U+25B7 WHITE RIGHT-POINTING TRIANGLE)*)
let _emopencircle : t =                   0x0ace  (*(U+25CB WHITE CIRCLE)*)
let _emopenrectangle : t =                0x0acf  (*(U+25AF WHITE VERTICAL RECTANGLE)*)
let _leftsinglequotemark : t =            0x0ad0  (* U+2018 LEFT SINGLE QUOTATION MARK *)
let _rightsinglequotemark : t =           0x0ad1  (* U+2019 RIGHT SINGLE QUOTATION MARK *)
let _leftdoublequotemark : t =            0x0ad2  (* U+201C LEFT DOUBLE QUOTATION MARK *)
let _rightdoublequotemark : t =           0x0ad3  (* U+201D RIGHT DOUBLE QUOTATION MARK *)
let _prescription : t =                   0x0ad4  (* U+211E PRESCRIPTION TAKE *)
let _permille : t =                       0x0ad5  (* U+2030 PER MILLE SIGN *)
let _minutes : t =                        0x0ad6  (* U+2032 PRIME *)
let _seconds : t =                        0x0ad7  (* U+2033 DOUBLE PRIME *)
let _latincross : t =                     0x0ad9  (* U+271D LATIN CROSS *)
let _hexagram : t =                       0x0ada
let _filledrectbullet : t =               0x0adb  (*(U+25AC BLACK RECTANGLE)*)
let _filledlefttribullet : t =            0x0adc  (*(U+25C0 BLACK LEFT-POINTING TRIANGLE)*)
let _filledrighttribullet : t =           0x0add  (*(U+25B6 BLACK RIGHT-POINTING TRIANGLE)*)
let _emfilledcircle : t =                 0x0ade  (*(U+25CF BLACK CIRCLE)*)
let _emfilledrect : t =                   0x0adf  (*(U+25AE BLACK VERTICAL RECTANGLE)*)
let _enopencircbullet : t =               0x0ae0  (*(U+25E6 WHITE BULLET)*)
let _enopensquarebullet : t =             0x0ae1  (*(U+25AB WHITE SMALL SQUARE)*)
let _openrectbullet : t =                 0x0ae2  (*(U+25AD WHITE RECTANGLE)*)
let _opentribulletup : t =                0x0ae3  (*(U+25B3 WHITE UP-POINTING TRIANGLE)*)
let _opentribulletdown : t =              0x0ae4  (*(U+25BD WHITE DOWN-POINTING TRIANGLE)*)
let _openstar : t =                       0x0ae5  (*(U+2606 WHITE STAR)*)
let _enfilledcircbullet : t =             0x0ae6  (*(U+2022 BULLET)*)
let _enfilledsqbullet : t =               0x0ae7  (*(U+25AA BLACK SMALL SQUARE)*)
let _filledtribulletup : t =              0x0ae8  (*(U+25B2 BLACK UP-POINTING TRIANGLE)*)
let _filledtribulletdown : t =            0x0ae9  (*(U+25BC BLACK DOWN-POINTING TRIANGLE)*)
let _leftpointer : t =                    0x0aea  (*(U+261C WHITE LEFT POINTING INDEX)*)
let _rightpointer : t =                   0x0aeb  (*(U+261E WHITE RIGHT POINTING INDEX)*)
let _club : t =                           0x0aec  (* U+2663 BLACK CLUB SUIT *)
let _diamond : t =                        0x0aed  (* U+2666 BLACK DIAMOND SUIT *)
let _heart : t =                          0x0aee  (* U+2665 BLACK HEART SUIT *)
let _maltesecross : t =                   0x0af0  (* U+2720 MALTESE CROSS *)
let _dagger : t =                         0x0af1  (* U+2020 DAGGER *)
let _doubledagger : t =                   0x0af2  (* U+2021 DOUBLE DAGGER *)
let _checkmark : t =                      0x0af3  (* U+2713 CHECK MARK *)
let _ballotcross : t =                    0x0af4  (* U+2717 BALLOT X *)
let _musicalsharp : t =                   0x0af5  (* U+266F MUSIC SHARP SIGN *)
let _musicalflat : t =                    0x0af6  (* U+266D MUSIC FLAT SIGN *)
let _malesymbol : t =                     0x0af7  (* U+2642 MALE SIGN *)
let _femalesymbol : t =                   0x0af8  (* U+2640 FEMALE SIGN *)
let _telephone : t =                      0x0af9  (* U+260E BLACK TELEPHONE *)
let _telephonerecorder : t =              0x0afa  (* U+2315 TELEPHONE RECORDER *)
let _phonographcopyright : t =            0x0afb  (* U+2117 SOUND RECORDING COPYRIGHT *)
let _caret : t =                          0x0afc  (* U+2038 CARET *)
let _singlelowquotemark : t =             0x0afd  (* U+201A SINGLE LOW-9 QUOTATION MARK *)
let _doublelowquotemark : t =             0x0afe  (* U+201E DOUBLE LOW-9 QUOTATION MARK *)
let _cursor : t =                         0x0aff

(*
 * APL
 * Byte 3 = 0x0b
 *)

let _leftcaret : t =                      0x0ba3  (*(U+003C LESS-THAN SIGN)*)
let _rightcaret : t =                     0x0ba6  (*(U+003E GREATER-THAN SIGN)*)
let _downcaret : t =                      0x0ba8  (*(U+2228 LOGICAL OR)*)
let _upcaret : t =                        0x0ba9  (*(U+2227 LOGICAL AND)*)
let _overbar : t =                        0x0bc0  (*(U+00AF MACRON)*)
let _downtack : t =                       0x0bc2  (* U+22A4 DOWN TACK *)
let _upshoe : t =                         0x0bc3  (*(U+2229 INTERSECTION)*)
let _downstile : t =                      0x0bc4  (* U+230A LEFT FLOOR *)
let _underbar : t =                       0x0bc6  (*(U+005F LOW LINE)*)
let _jot : t =                            0x0bca  (* U+2218 RING OPERATOR *)
let _quad : t =                           0x0bcc  (* U+2395 APL FUNCTIONAL SYMBOL QUAD *)
let _uptack : t =                         0x0bce  (* U+22A5 UP TACK *)
let _circle : t =                         0x0bcf  (* U+25CB WHITE CIRCLE *)
let _upstile : t =                        0x0bd3  (* U+2308 LEFT CEILING *)
let _downshoe : t =                       0x0bd6  (*(U+222A UNION)*)
let _rightshoe : t =                      0x0bd8  (*(U+2283 SUPERSET OF)*)
let _leftshoe : t =                       0x0bda  (*(U+2282 SUBSET OF)*)
let _lefttack : t =                       0x0bdc  (* U+22A3 LEFT TACK *)
let _righttack : t =                      0x0bfc  (* U+22A2 RIGHT TACK *)

(*
 * Hebrew
 * Byte 3 = 0x0c
 *)

let _hebrew_doublelowline : t =           0x0cdf  (* U+2017 DOUBLE LOW LINE *)
let _hebrew_aleph : t =                   0x0ce0  (* U+05D0 HEBREW LETTER ALEF *)
let _hebrew_bet : t =                     0x0ce1  (* U+05D1 HEBREW LETTER BET *)
let _hebrew_beth : t =                    0x0ce1  (* deprecated *)
let _hebrew_gimel : t =                   0x0ce2  (* U+05D2 HEBREW LETTER GIMEL *)
let _hebrew_gimmel : t =                  0x0ce2  (* deprecated *)
let _hebrew_dalet : t =                   0x0ce3  (* U+05D3 HEBREW LETTER DALET *)
let _hebrew_daleth : t =                  0x0ce3  (* deprecated *)
let _hebrew_he : t =                      0x0ce4  (* U+05D4 HEBREW LETTER HE *)
let _hebrew_waw : t =                     0x0ce5  (* U+05D5 HEBREW LETTER VAV *)
let _hebrew_zain : t =                    0x0ce6  (* U+05D6 HEBREW LETTER ZAYIN *)
let _hebrew_zayin : t =                   0x0ce6  (* deprecated *)
let _hebrew_chet : t =                    0x0ce7  (* U+05D7 HEBREW LETTER HET *)
let _hebrew_het : t =                     0x0ce7  (* deprecated *)
let _hebrew_tet : t =                     0x0ce8  (* U+05D8 HEBREW LETTER TET *)
let _hebrew_teth : t =                    0x0ce8  (* deprecated *)
let _hebrew_yod : t =                     0x0ce9  (* U+05D9 HEBREW LETTER YOD *)
let _hebrew_finalkaph : t =               0x0cea  (* U+05DA HEBREW LETTER FINAL KAF *)
let _hebrew_kaph : t =                    0x0ceb  (* U+05DB HEBREW LETTER KAF *)
let _hebrew_lamed : t =                   0x0cec  (* U+05DC HEBREW LETTER LAMED *)
let _hebrew_finalmem : t =                0x0ced  (* U+05DD HEBREW LETTER FINAL MEM *)
let _hebrew_mem : t =                     0x0cee  (* U+05DE HEBREW LETTER MEM *)
let _hebrew_finalnun : t =                0x0cef  (* U+05DF HEBREW LETTER FINAL NUN *)
let _hebrew_nun : t =                     0x0cf0  (* U+05E0 HEBREW LETTER NUN *)
let _hebrew_samech : t =                  0x0cf1  (* U+05E1 HEBREW LETTER SAMEKH *)
let _hebrew_samekh : t =                  0x0cf1  (* deprecated *)
let _hebrew_ayin : t =                    0x0cf2  (* U+05E2 HEBREW LETTER AYIN *)
let _hebrew_finalpe : t =                 0x0cf3  (* U+05E3 HEBREW LETTER FINAL PE *)
let _hebrew_pe : t =                      0x0cf4  (* U+05E4 HEBREW LETTER PE *)
let _hebrew_finalzade : t =               0x0cf5  (* U+05E5 HEBREW LETTER FINAL TSADI *)
let _hebrew_finalzadi : t =               0x0cf5  (* deprecated *)
let _hebrew_zade : t =                    0x0cf6  (* U+05E6 HEBREW LETTER TSADI *)
let _hebrew_zadi : t =                    0x0cf6  (* deprecated *)
let _hebrew_qoph : t =                    0x0cf7  (* U+05E7 HEBREW LETTER QOF *)
let _hebrew_kuf : t =                     0x0cf7  (* deprecated *)
let _hebrew_resh : t =                    0x0cf8  (* U+05E8 HEBREW LETTER RESH *)
let _hebrew_shin : t =                    0x0cf9  (* U+05E9 HEBREW LETTER SHIN *)
let _hebrew_taw : t =                     0x0cfa  (* U+05EA HEBREW LETTER TAV *)
let _hebrew_taf : t =                     0x0cfa  (* deprecated *)
let _Hebrew_switch : t =                  0xff7e  (* Alias for mode_switch *)

(*
 * Thai
 * Byte 3 = 0x0d
 *)

let _Thai_kokai : t =                     0x0da1  (* U+0E01 THAI CHARACTER KO KAI *)
let _Thai_khokhai : t =                   0x0da2  (* U+0E02 THAI CHARACTER KHO KHAI *)
let _Thai_khokhuat : t =                  0x0da3  (* U+0E03 THAI CHARACTER KHO KHUAT *)
let _Thai_khokhwai : t =                  0x0da4  (* U+0E04 THAI CHARACTER KHO KHWAI *)
let _Thai_khokhon : t =                   0x0da5  (* U+0E05 THAI CHARACTER KHO KHON *)
let _Thai_khorakhang : t =                0x0da6  (* U+0E06 THAI CHARACTER KHO RAKHANG *)
let _Thai_ngongu : t =                    0x0da7  (* U+0E07 THAI CHARACTER NGO NGU *)
let _Thai_chochan : t =                   0x0da8  (* U+0E08 THAI CHARACTER CHO CHAN *)
let _Thai_choching : t =                  0x0da9  (* U+0E09 THAI CHARACTER CHO CHING *)
let _Thai_chochang : t =                  0x0daa  (* U+0E0A THAI CHARACTER CHO CHANG *)
let _Thai_soso : t =                      0x0dab  (* U+0E0B THAI CHARACTER SO SO *)
let _Thai_chochoe : t =                   0x0dac  (* U+0E0C THAI CHARACTER CHO CHOE *)
let _Thai_yoying : t =                    0x0dad  (* U+0E0D THAI CHARACTER YO YING *)
let _Thai_dochada : t =                   0x0dae  (* U+0E0E THAI CHARACTER DO CHADA *)
let _Thai_topatak : t =                   0x0daf  (* U+0E0F THAI CHARACTER TO PATAK *)
let _Thai_thothan : t =                   0x0db0  (* U+0E10 THAI CHARACTER THO THAN *)
let _Thai_thonangmontho : t =             0x0db1  (* U+0E11 THAI CHARACTER THO NANGMONTHO *)
let _Thai_thophuthao : t =                0x0db2  (* U+0E12 THAI CHARACTER THO PHUTHAO *)
let _Thai_nonen : t =                     0x0db3  (* U+0E13 THAI CHARACTER NO NEN *)
let _Thai_dodek : t =                     0x0db4  (* U+0E14 THAI CHARACTER DO DEK *)
let _Thai_totao : t =                     0x0db5  (* U+0E15 THAI CHARACTER TO TAO *)
let _Thai_thothung : t =                  0x0db6  (* U+0E16 THAI CHARACTER THO THUNG *)
let _Thai_thothahan : t =                 0x0db7  (* U+0E17 THAI CHARACTER THO THAHAN *)
let _Thai_thothong : t =                  0x0db8  (* U+0E18 THAI CHARACTER THO THONG *)
let _Thai_nonu : t =                      0x0db9  (* U+0E19 THAI CHARACTER NO NU *)
let _Thai_bobaimai : t =                  0x0dba  (* U+0E1A THAI CHARACTER BO BAIMAI *)
let _Thai_popla : t =                     0x0dbb  (* U+0E1B THAI CHARACTER PO PLA *)
let _Thai_phophung : t =                  0x0dbc  (* U+0E1C THAI CHARACTER PHO PHUNG *)
let _Thai_fofa : t =                      0x0dbd  (* U+0E1D THAI CHARACTER FO FA *)
let _Thai_phophan : t =                   0x0dbe  (* U+0E1E THAI CHARACTER PHO PHAN *)
let _Thai_fofan : t =                     0x0dbf  (* U+0E1F THAI CHARACTER FO FAN *)
let _Thai_phosamphao : t =                0x0dc0  (* U+0E20 THAI CHARACTER PHO SAMPHAO *)
let _Thai_moma : t =                      0x0dc1  (* U+0E21 THAI CHARACTER MO MA *)
let _Thai_yoyak : t =                     0x0dc2  (* U+0E22 THAI CHARACTER YO YAK *)
let _Thai_rorua : t =                     0x0dc3  (* U+0E23 THAI CHARACTER RO RUA *)
let _Thai_ru : t =                        0x0dc4  (* U+0E24 THAI CHARACTER RU *)
let _Thai_loling : t =                    0x0dc5  (* U+0E25 THAI CHARACTER LO LING *)
let _Thai_lu : t =                        0x0dc6  (* U+0E26 THAI CHARACTER LU *)
let _Thai_wowaen : t =                    0x0dc7  (* U+0E27 THAI CHARACTER WO WAEN *)
let _Thai_sosala : t =                    0x0dc8  (* U+0E28 THAI CHARACTER SO SALA *)
let _Thai_sorusi : t =                    0x0dc9  (* U+0E29 THAI CHARACTER SO RUSI *)
let _Thai_sosua : t =                     0x0dca  (* U+0E2A THAI CHARACTER SO SUA *)
let _Thai_hohip : t =                     0x0dcb  (* U+0E2B THAI CHARACTER HO HIP *)
let _Thai_lochula : t =                   0x0dcc  (* U+0E2C THAI CHARACTER LO CHULA *)
let _Thai_oang : t =                      0x0dcd  (* U+0E2D THAI CHARACTER O ANG *)
let _Thai_honokhuk : t =                  0x0dce  (* U+0E2E THAI CHARACTER HO NOKHUK *)
let _Thai_paiyannoi : t =                 0x0dcf  (* U+0E2F THAI CHARACTER PAIYANNOI *)
let _Thai_saraa : t =                     0x0dd0  (* U+0E30 THAI CHARACTER SARA A *)
let _Thai_maihanakat : t =                0x0dd1  (* U+0E31 THAI CHARACTER MAI HAN-AKAT *)
let _Thai_saraaa : t =                    0x0dd2  (* U+0E32 THAI CHARACTER SARA AA *)
let _Thai_saraam : t =                    0x0dd3  (* U+0E33 THAI CHARACTER SARA AM *)
let _Thai_sarai : t =                     0x0dd4  (* U+0E34 THAI CHARACTER SARA I *)
let _Thai_saraii : t =                    0x0dd5  (* U+0E35 THAI CHARACTER SARA II *)
let _Thai_saraue : t =                    0x0dd6  (* U+0E36 THAI CHARACTER SARA UE *)
let _Thai_sarauee : t =                   0x0dd7  (* U+0E37 THAI CHARACTER SARA UEE *)
let _Thai_sarau : t =                     0x0dd8  (* U+0E38 THAI CHARACTER SARA U *)
let _Thai_sarauu : t =                    0x0dd9  (* U+0E39 THAI CHARACTER SARA UU *)
let _Thai_phinthu : t =                   0x0dda  (* U+0E3A THAI CHARACTER PHINTHU *)
let _Thai_maihanakat_maitho : t =         0x0dde
let _Thai_baht : t =                      0x0ddf  (* U+0E3F THAI CURRENCY SYMBOL BAHT *)
let _Thai_sarae : t =                     0x0de0  (* U+0E40 THAI CHARACTER SARA E *)
let _Thai_saraae : t =                    0x0de1  (* U+0E41 THAI CHARACTER SARA AE *)
let _Thai_sarao : t =                     0x0de2  (* U+0E42 THAI CHARACTER SARA O *)
let _Thai_saraaimaimuan : t =             0x0de3  (* U+0E43 THAI CHARACTER SARA AI MAIMUAN *)
let _Thai_saraaimaimalai : t =            0x0de4  (* U+0E44 THAI CHARACTER SARA AI MAIMALAI *)
let _Thai_lakkhangyao : t =               0x0de5  (* U+0E45 THAI CHARACTER LAKKHANGYAO *)
let _Thai_maiyamok : t =                  0x0de6  (* U+0E46 THAI CHARACTER MAIYAMOK *)
let _Thai_maitaikhu : t =                 0x0de7  (* U+0E47 THAI CHARACTER MAITAIKHU *)
let _Thai_maiek : t =                     0x0de8  (* U+0E48 THAI CHARACTER MAI EK *)
let _Thai_maitho : t =                    0x0de9  (* U+0E49 THAI CHARACTER MAI THO *)
let _Thai_maitri : t =                    0x0dea  (* U+0E4A THAI CHARACTER MAI TRI *)
let _Thai_maichattawa : t =               0x0deb  (* U+0E4B THAI CHARACTER MAI CHATTAWA *)
let _Thai_thanthakhat : t =               0x0dec  (* U+0E4C THAI CHARACTER THANTHAKHAT *)
let _Thai_nikhahit : t =                  0x0ded  (* U+0E4D THAI CHARACTER NIKHAHIT *)
let _Thai_leksun : t =                    0x0df0  (* U+0E50 THAI DIGIT ZERO *)
let _Thai_leknung : t =                   0x0df1  (* U+0E51 THAI DIGIT ONE *)
let _Thai_leksong : t =                   0x0df2  (* U+0E52 THAI DIGIT TWO *)
let _Thai_leksam : t =                    0x0df3  (* U+0E53 THAI DIGIT THREE *)
let _Thai_leksi : t =                     0x0df4  (* U+0E54 THAI DIGIT FOUR *)
let _Thai_lekha : t =                     0x0df5  (* U+0E55 THAI DIGIT FIVE *)
let _Thai_lekhok : t =                    0x0df6  (* U+0E56 THAI DIGIT SIX *)
let _Thai_lekchet : t =                   0x0df7  (* U+0E57 THAI DIGIT SEVEN *)
let _Thai_lekpaet : t =                   0x0df8  (* U+0E58 THAI DIGIT EIGHT *)
let _Thai_lekkao : t =                    0x0df9  (* U+0E59 THAI DIGIT NINE *)

(*
 * Korean
 * Byte 3 = 0x0e
 *)


let _Hangul : t =                         0xff31  (* Hangul start/stop(toggle) *)
let _Hangul_Start : t =                   0xff32  (* Hangul start *)
let _Hangul_End : t =                     0xff33  (* Hangul end, English start *)
let _Hangul_Hanja : t =                   0xff34  (* Start Hangul->Hanja Conversion *)
let _Hangul_Jamo : t =                    0xff35  (* Hangul Jamo mode *)
let _Hangul_Romaja : t =                  0xff36  (* Hangul Romaja mode *)
let _Hangul_Codeinput : t =               0xff37  (* Hangul code input mode *)
let _Hangul_Jeonja : t =                  0xff38  (* Jeonja mode *)
let _Hangul_Banja : t =                   0xff39  (* Banja mode *)
let _Hangul_PreHanja : t =                0xff3a  (* Pre Hanja conversion *)
let _Hangul_PostHanja : t =               0xff3b  (* Post Hanja conversion *)
let _Hangul_SingleCandidate : t =         0xff3c  (* Single candidate *)
let _Hangul_MultipleCandidate : t =       0xff3d  (* Multiple candidate *)
let _Hangul_PreviousCandidate : t =       0xff3e  (* Previous candidate *)
let _Hangul_Special : t =                 0xff3f  (* Special symbols *)
let _Hangul_switch : t =                  0xff7e  (* Alias for mode_switch *)

(* Hangul Consonant Characters *)
let _Hangul_Kiyeog : t =                  0x0ea1
let _Hangul_SsangKiyeog : t =             0x0ea2
let _Hangul_KiyeogSios : t =              0x0ea3
let _Hangul_Nieun : t =                   0x0ea4
let _Hangul_NieunJieuj : t =              0x0ea5
let _Hangul_NieunHieuh : t =              0x0ea6
let _Hangul_Dikeud : t =                  0x0ea7
let _Hangul_SsangDikeud : t =             0x0ea8
let _Hangul_Rieul : t =                   0x0ea9
let _Hangul_RieulKiyeog : t =             0x0eaa
let _Hangul_RieulMieum : t =              0x0eab
let _Hangul_RieulPieub : t =              0x0eac
let _Hangul_RieulSios : t =               0x0ead
let _Hangul_RieulTieut : t =              0x0eae
let _Hangul_RieulPhieuf : t =             0x0eaf
let _Hangul_RieulHieuh : t =              0x0eb0
let _Hangul_Mieum : t =                   0x0eb1
let _Hangul_Pieub : t =                   0x0eb2
let _Hangul_SsangPieub : t =              0x0eb3
let _Hangul_PieubSios : t =               0x0eb4
let _Hangul_Sios : t =                    0x0eb5
let _Hangul_SsangSios : t =               0x0eb6
let _Hangul_Ieung : t =                   0x0eb7
let _Hangul_Jieuj : t =                   0x0eb8
let _Hangul_SsangJieuj : t =              0x0eb9
let _Hangul_Cieuc : t =                   0x0eba
let _Hangul_Khieuq : t =                  0x0ebb
let _Hangul_Tieut : t =                   0x0ebc
let _Hangul_Phieuf : t =                  0x0ebd
let _Hangul_Hieuh : t =                   0x0ebe

(* Hangul Vowel Characters *)
let _Hangul_A : t =                       0x0ebf
let _Hangul_AE : t =                      0x0ec0
let _Hangul_YA : t =                      0x0ec1
let _Hangul_YAE : t =                     0x0ec2
let _Hangul_EO : t =                      0x0ec3
let _Hangul_E : t =                       0x0ec4
let _Hangul_YEO : t =                     0x0ec5
let _Hangul_YE : t =                      0x0ec6
let _Hangul_O : t =                       0x0ec7
let _Hangul_WA : t =                      0x0ec8
let _Hangul_WAE : t =                     0x0ec9
let _Hangul_OE : t =                      0x0eca
let _Hangul_YO : t =                      0x0ecb
let _Hangul_U : t =                       0x0ecc
let _Hangul_WEO : t =                     0x0ecd
let _Hangul_WE : t =                      0x0ece
let _Hangul_WI : t =                      0x0ecf
let _Hangul_YU : t =                      0x0ed0
let _Hangul_EU : t =                      0x0ed1
let _Hangul_YI : t =                      0x0ed2
let _Hangul_I : t =                       0x0ed3

(* Hangul syllable-final (JongSeong) Characters *)
let _Hangul_J_Kiyeog : t =                0x0ed4
let _Hangul_J_SsangKiyeog : t =           0x0ed5
let _Hangul_J_KiyeogSios : t =            0x0ed6
let _Hangul_J_Nieun : t =                 0x0ed7
let _Hangul_J_NieunJieuj : t =            0x0ed8
let _Hangul_J_NieunHieuh : t =            0x0ed9
let _Hangul_J_Dikeud : t =                0x0eda
let _Hangul_J_Rieul : t =                 0x0edb
let _Hangul_J_RieulKiyeog : t =           0x0edc
let _Hangul_J_RieulMieum : t =            0x0edd
let _Hangul_J_RieulPieub : t =            0x0ede
let _Hangul_J_RieulSios : t =             0x0edf
let _Hangul_J_RieulTieut : t =            0x0ee0
let _Hangul_J_RieulPhieuf : t =           0x0ee1
let _Hangul_J_RieulHieuh : t =            0x0ee2
let _Hangul_J_Mieum : t =                 0x0ee3
let _Hangul_J_Pieub : t =                 0x0ee4
let _Hangul_J_PieubSios : t =             0x0ee5
let _Hangul_J_Sios : t =                  0x0ee6
let _Hangul_J_SsangSios : t =             0x0ee7
let _Hangul_J_Ieung : t =                 0x0ee8
let _Hangul_J_Jieuj : t =                 0x0ee9
let _Hangul_J_Cieuc : t =                 0x0eea
let _Hangul_J_Khieuq : t =                0x0eeb
let _Hangul_J_Tieut : t =                 0x0eec
let _Hangul_J_Phieuf : t =                0x0eed
let _Hangul_J_Hieuh : t =                 0x0eee

(* Ancient Hangul Consonant Characters *)
let _Hangul_RieulYeorinHieuh : t =        0x0eef
let _Hangul_SunkyeongeumMieum : t =       0x0ef0
let _Hangul_SunkyeongeumPieub : t =       0x0ef1
let _Hangul_PanSios : t =                 0x0ef2
let _Hangul_KkogjiDalrinIeung : t =       0x0ef3
let _Hangul_SunkyeongeumPhieuf : t =      0x0ef4
let _Hangul_YeorinHieuh : t =             0x0ef5

(* Ancient Hangul Vowel Characters *)
let _Hangul_AraeA : t =                   0x0ef6
let _Hangul_AraeAE : t =                  0x0ef7

(* Ancient Hangul syllable-final (JongSeong) Characters *)
let _Hangul_J_PanSios : t =               0x0ef8
let _Hangul_J_KkogjiDalrinIeung : t =     0x0ef9
let _Hangul_J_YeorinHieuh : t =           0x0efa

(* Korean currency symbol *)
let _Korean_Won : t =                     0x0eff  (*(U+20A9 WON SIGN)*)


(*
 * Armenian
 *)

let _Armenian_ligature_ew : t =        0x1000587  (* U+0587 ARMENIAN SMALL LIGATURE ECH YIWN *)
let _Armenian_full_stop : t =          0x1000589  (* U+0589 ARMENIAN FULL STOP *)
let _Armenian_verjaket : t =           0x1000589  (* U+0589 ARMENIAN FULL STOP *)
let _Armenian_separation_mark : t =    0x100055d  (* U+055D ARMENIAN COMMA *)
let _Armenian_but : t =                0x100055d  (* U+055D ARMENIAN COMMA *)
let _Armenian_hyphen : t =             0x100058a  (* U+058A ARMENIAN HYPHEN *)
let _Armenian_yentamna : t =           0x100058a  (* U+058A ARMENIAN HYPHEN *)
let _Armenian_exclam : t =             0x100055c  (* U+055C ARMENIAN EXCLAMATION MARK *)
let _Armenian_amanak : t =             0x100055c  (* U+055C ARMENIAN EXCLAMATION MARK *)
let _Armenian_accent : t =             0x100055b  (* U+055B ARMENIAN EMPHASIS MARK *)
let _Armenian_shesht : t =             0x100055b  (* U+055B ARMENIAN EMPHASIS MARK *)
let _Armenian_question : t =           0x100055e  (* U+055E ARMENIAN QUESTION MARK *)
let _Armenian_paruyk : t =             0x100055e  (* U+055E ARMENIAN QUESTION MARK *)
let _Armenian_AYB : t =                0x1000531  (* U+0531 ARMENIAN CAPITAL LETTER AYB *)
let _Armenian_ayb : t =                0x1000561  (* U+0561 ARMENIAN SMALL LETTER AYB *)
let _Armenian_BEN : t =                0x1000532  (* U+0532 ARMENIAN CAPITAL LETTER BEN *)
let _Armenian_ben : t =                0x1000562  (* U+0562 ARMENIAN SMALL LETTER BEN *)
let _Armenian_GIM : t =                0x1000533  (* U+0533 ARMENIAN CAPITAL LETTER GIM *)
let _Armenian_gim : t =                0x1000563  (* U+0563 ARMENIAN SMALL LETTER GIM *)
let _Armenian_DA : t =                 0x1000534  (* U+0534 ARMENIAN CAPITAL LETTER DA *)
let _Armenian_da : t =                 0x1000564  (* U+0564 ARMENIAN SMALL LETTER DA *)
let _Armenian_YECH : t =               0x1000535  (* U+0535 ARMENIAN CAPITAL LETTER ECH *)
let _Armenian_yech : t =               0x1000565  (* U+0565 ARMENIAN SMALL LETTER ECH *)
let _Armenian_ZA : t =                 0x1000536  (* U+0536 ARMENIAN CAPITAL LETTER ZA *)
let _Armenian_za : t =                 0x1000566  (* U+0566 ARMENIAN SMALL LETTER ZA *)
let _Armenian_E : t =                  0x1000537  (* U+0537 ARMENIAN CAPITAL LETTER EH *)
let _Armenian_e : t =                  0x1000567  (* U+0567 ARMENIAN SMALL LETTER EH *)
let _Armenian_AT : t =                 0x1000538  (* U+0538 ARMENIAN CAPITAL LETTER ET *)
let _Armenian_at : t =                 0x1000568  (* U+0568 ARMENIAN SMALL LETTER ET *)
let _Armenian_TO : t =                 0x1000539  (* U+0539 ARMENIAN CAPITAL LETTER TO *)
let _Armenian_to : t =                 0x1000569  (* U+0569 ARMENIAN SMALL LETTER TO *)
let _Armenian_ZHE : t =                0x100053a  (* U+053A ARMENIAN CAPITAL LETTER ZHE *)
let _Armenian_zhe : t =                0x100056a  (* U+056A ARMENIAN SMALL LETTER ZHE *)
let _Armenian_INI : t =                0x100053b  (* U+053B ARMENIAN CAPITAL LETTER INI *)
let _Armenian_ini : t =                0x100056b  (* U+056B ARMENIAN SMALL LETTER INI *)
let _Armenian_LYUN : t =               0x100053c  (* U+053C ARMENIAN CAPITAL LETTER LIWN *)
let _Armenian_lyun : t =               0x100056c  (* U+056C ARMENIAN SMALL LETTER LIWN *)
let _Armenian_KHE : t =                0x100053d  (* U+053D ARMENIAN CAPITAL LETTER XEH *)
let _Armenian_khe : t =                0x100056d  (* U+056D ARMENIAN SMALL LETTER XEH *)
let _Armenian_TSA : t =                0x100053e  (* U+053E ARMENIAN CAPITAL LETTER CA *)
let _Armenian_tsa : t =                0x100056e  (* U+056E ARMENIAN SMALL LETTER CA *)
let _Armenian_KEN : t =                0x100053f  (* U+053F ARMENIAN CAPITAL LETTER KEN *)
let _Armenian_ken : t =                0x100056f  (* U+056F ARMENIAN SMALL LETTER KEN *)
let _Armenian_HO : t =                 0x1000540  (* U+0540 ARMENIAN CAPITAL LETTER HO *)
let _Armenian_ho : t =                 0x1000570  (* U+0570 ARMENIAN SMALL LETTER HO *)
let _Armenian_DZA : t =                0x1000541  (* U+0541 ARMENIAN CAPITAL LETTER JA *)
let _Armenian_dza : t =                0x1000571  (* U+0571 ARMENIAN SMALL LETTER JA *)
let _Armenian_GHAT : t =               0x1000542  (* U+0542 ARMENIAN CAPITAL LETTER GHAD *)
let _Armenian_ghat : t =               0x1000572  (* U+0572 ARMENIAN SMALL LETTER GHAD *)
let _Armenian_TCHE : t =               0x1000543  (* U+0543 ARMENIAN CAPITAL LETTER CHEH *)
let _Armenian_tche : t =               0x1000573  (* U+0573 ARMENIAN SMALL LETTER CHEH *)
let _Armenian_MEN : t =                0x1000544  (* U+0544 ARMENIAN CAPITAL LETTER MEN *)
let _Armenian_men : t =                0x1000574  (* U+0574 ARMENIAN SMALL LETTER MEN *)
let _Armenian_HI : t =                 0x1000545  (* U+0545 ARMENIAN CAPITAL LETTER YI *)
let _Armenian_hi : t =                 0x1000575  (* U+0575 ARMENIAN SMALL LETTER YI *)
let _Armenian_NU : t =                 0x1000546  (* U+0546 ARMENIAN CAPITAL LETTER NOW *)
let _Armenian_nu : t =                 0x1000576  (* U+0576 ARMENIAN SMALL LETTER NOW *)
let _Armenian_SHA : t =                0x1000547  (* U+0547 ARMENIAN CAPITAL LETTER SHA *)
let _Armenian_sha : t =                0x1000577  (* U+0577 ARMENIAN SMALL LETTER SHA *)
let _Armenian_VO : t =                 0x1000548  (* U+0548 ARMENIAN CAPITAL LETTER VO *)
let _Armenian_vo : t =                 0x1000578  (* U+0578 ARMENIAN SMALL LETTER VO *)
let _Armenian_CHA : t =                0x1000549  (* U+0549 ARMENIAN CAPITAL LETTER CHA *)
let _Armenian_cha : t =                0x1000579  (* U+0579 ARMENIAN SMALL LETTER CHA *)
let _Armenian_PE : t =                 0x100054a  (* U+054A ARMENIAN CAPITAL LETTER PEH *)
let _Armenian_pe : t =                 0x100057a  (* U+057A ARMENIAN SMALL LETTER PEH *)
let _Armenian_JE : t =                 0x100054b  (* U+054B ARMENIAN CAPITAL LETTER JHEH *)
let _Armenian_je : t =                 0x100057b  (* U+057B ARMENIAN SMALL LETTER JHEH *)
let _Armenian_RA : t =                 0x100054c  (* U+054C ARMENIAN CAPITAL LETTER RA *)
let _Armenian_ra : t =                 0x100057c  (* U+057C ARMENIAN SMALL LETTER RA *)
let _Armenian_SE : t =                 0x100054d  (* U+054D ARMENIAN CAPITAL LETTER SEH *)
let _Armenian_se : t =                 0x100057d  (* U+057D ARMENIAN SMALL LETTER SEH *)
let _Armenian_VEV : t =                0x100054e  (* U+054E ARMENIAN CAPITAL LETTER VEW *)
let _Armenian_vev : t =                0x100057e  (* U+057E ARMENIAN SMALL LETTER VEW *)
let _Armenian_TYUN : t =               0x100054f  (* U+054F ARMENIAN CAPITAL LETTER TIWN *)
let _Armenian_tyun : t =               0x100057f  (* U+057F ARMENIAN SMALL LETTER TIWN *)
let _Armenian_RE : t =                 0x1000550  (* U+0550 ARMENIAN CAPITAL LETTER REH *)
let _Armenian_re : t =                 0x1000580  (* U+0580 ARMENIAN SMALL LETTER REH *)
let _Armenian_TSO : t =                0x1000551  (* U+0551 ARMENIAN CAPITAL LETTER CO *)
let _Armenian_tso : t =                0x1000581  (* U+0581 ARMENIAN SMALL LETTER CO *)
let _Armenian_VYUN : t =               0x1000552  (* U+0552 ARMENIAN CAPITAL LETTER YIWN *)
let _Armenian_vyun : t =               0x1000582  (* U+0582 ARMENIAN SMALL LETTER YIWN *)
let _Armenian_PYUR : t =               0x1000553  (* U+0553 ARMENIAN CAPITAL LETTER PIWR *)
let _Armenian_pyur : t =               0x1000583  (* U+0583 ARMENIAN SMALL LETTER PIWR *)
let _Armenian_KE : t =                 0x1000554  (* U+0554 ARMENIAN CAPITAL LETTER KEH *)
let _Armenian_ke : t =                 0x1000584  (* U+0584 ARMENIAN SMALL LETTER KEH *)
let _Armenian_O : t =                  0x1000555  (* U+0555 ARMENIAN CAPITAL LETTER OH *)
let _Armenian_o : t =                  0x1000585  (* U+0585 ARMENIAN SMALL LETTER OH *)
let _Armenian_FE : t =                 0x1000556  (* U+0556 ARMENIAN CAPITAL LETTER FEH *)
let _Armenian_fe : t =                 0x1000586  (* U+0586 ARMENIAN SMALL LETTER FEH *)
let _Armenian_apostrophe : t =         0x100055a  (* U+055A ARMENIAN APOSTROPHE *)

(*
 * Georgian
 *)

let _Georgian_an : t =                 0x10010d0  (* U+10D0 GEORGIAN LETTER AN *)
let _Georgian_ban : t =                0x10010d1  (* U+10D1 GEORGIAN LETTER BAN *)
let _Georgian_gan : t =                0x10010d2  (* U+10D2 GEORGIAN LETTER GAN *)
let _Georgian_don : t =                0x10010d3  (* U+10D3 GEORGIAN LETTER DON *)
let _Georgian_en : t =                 0x10010d4  (* U+10D4 GEORGIAN LETTER EN *)
let _Georgian_vin : t =                0x10010d5  (* U+10D5 GEORGIAN LETTER VIN *)
let _Georgian_zen : t =                0x10010d6  (* U+10D6 GEORGIAN LETTER ZEN *)
let _Georgian_tan : t =                0x10010d7  (* U+10D7 GEORGIAN LETTER TAN *)
let _Georgian_in : t =                 0x10010d8  (* U+10D8 GEORGIAN LETTER IN *)
let _Georgian_kan : t =                0x10010d9  (* U+10D9 GEORGIAN LETTER KAN *)
let _Georgian_las : t =                0x10010da  (* U+10DA GEORGIAN LETTER LAS *)
let _Georgian_man : t =                0x10010db  (* U+10DB GEORGIAN LETTER MAN *)
let _Georgian_nar : t =                0x10010dc  (* U+10DC GEORGIAN LETTER NAR *)
let _Georgian_on : t =                 0x10010dd  (* U+10DD GEORGIAN LETTER ON *)
let _Georgian_par : t =                0x10010de  (* U+10DE GEORGIAN LETTER PAR *)
let _Georgian_zhar : t =               0x10010df  (* U+10DF GEORGIAN LETTER ZHAR *)
let _Georgian_rae : t =                0x10010e0  (* U+10E0 GEORGIAN LETTER RAE *)
let _Georgian_san : t =                0x10010e1  (* U+10E1 GEORGIAN LETTER SAN *)
let _Georgian_tar : t =                0x10010e2  (* U+10E2 GEORGIAN LETTER TAR *)
let _Georgian_un : t =                 0x10010e3  (* U+10E3 GEORGIAN LETTER UN *)
let _Georgian_phar : t =               0x10010e4  (* U+10E4 GEORGIAN LETTER PHAR *)
let _Georgian_khar : t =               0x10010e5  (* U+10E5 GEORGIAN LETTER KHAR *)
let _Georgian_ghan : t =               0x10010e6  (* U+10E6 GEORGIAN LETTER GHAN *)
let _Georgian_qar : t =                0x10010e7  (* U+10E7 GEORGIAN LETTER QAR *)
let _Georgian_shin : t =               0x10010e8  (* U+10E8 GEORGIAN LETTER SHIN *)
let _Georgian_chin : t =               0x10010e9  (* U+10E9 GEORGIAN LETTER CHIN *)
let _Georgian_can : t =                0x10010ea  (* U+10EA GEORGIAN LETTER CAN *)
let _Georgian_jil : t =                0x10010eb  (* U+10EB GEORGIAN LETTER JIL *)
let _Georgian_cil : t =                0x10010ec  (* U+10EC GEORGIAN LETTER CIL *)
let _Georgian_char : t =               0x10010ed  (* U+10ED GEORGIAN LETTER CHAR *)
let _Georgian_xan : t =                0x10010ee  (* U+10EE GEORGIAN LETTER XAN *)
let _Georgian_jhan : t =               0x10010ef  (* U+10EF GEORGIAN LETTER JHAN *)
let _Georgian_hae : t =                0x10010f0  (* U+10F0 GEORGIAN LETTER HAE *)
let _Georgian_he : t =                 0x10010f1  (* U+10F1 GEORGIAN LETTER HE *)
let _Georgian_hie : t =                0x10010f2  (* U+10F2 GEORGIAN LETTER HIE *)
let _Georgian_we : t =                 0x10010f3  (* U+10F3 GEORGIAN LETTER WE *)
let _Georgian_har : t =                0x10010f4  (* U+10F4 GEORGIAN LETTER HAR *)
let _Georgian_hoe : t =                0x10010f5  (* U+10F5 GEORGIAN LETTER HOE *)
let _Georgian_fi : t =                 0x10010f6  (* U+10F6 GEORGIAN LETTER FI *)

(*
 * Azeri (and other Turkic or Caucasian languages)
 *)

(* latin *)
let _Xabovedot : t =                   0x1001e8a  (* U+1E8A LATIN CAPITAL LETTER X WITH DOT ABOVE *)
let _Ibreve : t =                      0x100012c  (* U+012C LATIN CAPITAL LETTER I WITH BREVE *)
let _Zstroke : t =                     0x10001b5  (* U+01B5 LATIN CAPITAL LETTER Z WITH STROKE *)
let _Gcaron : t =                      0x10001e6  (* U+01E6 LATIN CAPITAL LETTER G WITH CARON *)
let _Ocaron : t =                      0x10001d1  (* U+01D2 LATIN CAPITAL LETTER O WITH CARON *)
let _Obarred : t =                     0x100019f  (* U+019F LATIN CAPITAL LETTER O WITH MIDDLE TILDE *)
let _xabovedot : t =                   0x1001e8b  (* U+1E8B LATIN SMALL LETTER X WITH DOT ABOVE *)
let _ibreve : t =                      0x100012d  (* U+012D LATIN SMALL LETTER I WITH BREVE *)
let _zstroke : t =                     0x10001b6  (* U+01B6 LATIN SMALL LETTER Z WITH STROKE *)
let _gcaron : t =                      0x10001e7  (* U+01E7 LATIN SMALL LETTER G WITH CARON *)
let _ocaron : t =                      0x10001d2  (* U+01D2 LATIN SMALL LETTER O WITH CARON *)
let _obarred : t =                     0x1000275  (* U+0275 LATIN SMALL LETTER BARRED O *)
let _SCHWA : t =                       0x100018f  (* U+018F LATIN CAPITAL LETTER SCHWA *)
let _schwa : t =                       0x1000259  (* U+0259 LATIN SMALL LETTER SCHWA *)
let _EZH : t =                         0x10001b7  (* U+01B7 LATIN CAPITAL LETTER EZH *)
let _ezh : t =                         0x1000292  (* U+0292 LATIN SMALL LETTER EZH *)
(* those are not really Caucasus *)
(* For Inupiak *)
let _Lbelowdot : t =                   0x1001e36  (* U+1E36 LATIN CAPITAL LETTER L WITH DOT BELOW *)
let _lbelowdot : t =                   0x1001e37  (* U+1E37 LATIN SMALL LETTER L WITH DOT BELOW *)

(*
 * Vietnamese
 *)
 
let _Abelowdot : t =                   0x1001ea0  (* U+1EA0 LATIN CAPITAL LETTER A WITH DOT BELOW *)
let _abelowdot : t =                   0x1001ea1  (* U+1EA1 LATIN SMALL LETTER A WITH DOT BELOW *)
let _Ahook : t =                       0x1001ea2  (* U+1EA2 LATIN CAPITAL LETTER A WITH HOOK ABOVE *)
let _ahook : t =                       0x1001ea3  (* U+1EA3 LATIN SMALL LETTER A WITH HOOK ABOVE *)
let _Acircumflexacute : t =            0x1001ea4  (* U+1EA4 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE *)
let _acircumflexacute : t =            0x1001ea5  (* U+1EA5 LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE *)
let _Acircumflexgrave : t =            0x1001ea6  (* U+1EA6 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE *)
let _acircumflexgrave : t =            0x1001ea7  (* U+1EA7 LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE *)
let _Acircumflexhook : t =             0x1001ea8  (* U+1EA8 LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE *)
let _acircumflexhook : t =             0x1001ea9  (* U+1EA9 LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE *)
let _Acircumflextilde : t =            0x1001eaa  (* U+1EAA LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE *)
let _acircumflextilde : t =            0x1001eab  (* U+1EAB LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE *)
let _Acircumflexbelowdot : t =         0x1001eac  (* U+1EAC LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW *)
let _acircumflexbelowdot : t =         0x1001ead  (* U+1EAD LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW *)
let _Abreveacute : t =                 0x1001eae  (* U+1EAE LATIN CAPITAL LETTER A WITH BREVE AND ACUTE *)
let _abreveacute : t =                 0x1001eaf  (* U+1EAF LATIN SMALL LETTER A WITH BREVE AND ACUTE *)
let _Abrevegrave : t =                 0x1001eb0  (* U+1EB0 LATIN CAPITAL LETTER A WITH BREVE AND GRAVE *)
let _abrevegrave : t =                 0x1001eb1  (* U+1EB1 LATIN SMALL LETTER A WITH BREVE AND GRAVE *)
let _Abrevehook : t =                  0x1001eb2  (* U+1EB2 LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE *)
let _abrevehook : t =                  0x1001eb3  (* U+1EB3 LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE *)
let _Abrevetilde : t =                 0x1001eb4  (* U+1EB4 LATIN CAPITAL LETTER A WITH BREVE AND TILDE *)
let _abrevetilde : t =                 0x1001eb5  (* U+1EB5 LATIN SMALL LETTER A WITH BREVE AND TILDE *)
let _Abrevebelowdot : t =              0x1001eb6  (* U+1EB6 LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW *)
let _abrevebelowdot : t =              0x1001eb7  (* U+1EB7 LATIN SMALL LETTER A WITH BREVE AND DOT BELOW *)
let _Ebelowdot : t =                   0x1001eb8  (* U+1EB8 LATIN CAPITAL LETTER E WITH DOT BELOW *)
let _ebelowdot : t =                   0x1001eb9  (* U+1EB9 LATIN SMALL LETTER E WITH DOT BELOW *)
let _Ehook : t =                       0x1001eba  (* U+1EBA LATIN CAPITAL LETTER E WITH HOOK ABOVE *)
let _ehook : t =                       0x1001ebb  (* U+1EBB LATIN SMALL LETTER E WITH HOOK ABOVE *)
let _Etilde : t =                      0x1001ebc  (* U+1EBC LATIN CAPITAL LETTER E WITH TILDE *)
let _etilde : t =                      0x1001ebd  (* U+1EBD LATIN SMALL LETTER E WITH TILDE *)
let _Ecircumflexacute : t =            0x1001ebe  (* U+1EBE LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE *)
let _ecircumflexacute : t =            0x1001ebf  (* U+1EBF LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE *)
let _Ecircumflexgrave : t =            0x1001ec0  (* U+1EC0 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE *)
let _ecircumflexgrave : t =            0x1001ec1  (* U+1EC1 LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE *)
let _Ecircumflexhook : t =             0x1001ec2  (* U+1EC2 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE *)
let _ecircumflexhook : t =             0x1001ec3  (* U+1EC3 LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE *)
let _Ecircumflextilde : t =            0x1001ec4  (* U+1EC4 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE *)
let _ecircumflextilde : t =            0x1001ec5  (* U+1EC5 LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE *)
let _Ecircumflexbelowdot : t =         0x1001ec6  (* U+1EC6 LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW *)
let _ecircumflexbelowdot : t =         0x1001ec7  (* U+1EC7 LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW *)
let _Ihook : t =                       0x1001ec8  (* U+1EC8 LATIN CAPITAL LETTER I WITH HOOK ABOVE *)
let _ihook : t =                       0x1001ec9  (* U+1EC9 LATIN SMALL LETTER I WITH HOOK ABOVE *)
let _Ibelowdot : t =                   0x1001eca  (* U+1ECA LATIN CAPITAL LETTER I WITH DOT BELOW *)
let _ibelowdot : t =                   0x1001ecb  (* U+1ECB LATIN SMALL LETTER I WITH DOT BELOW *)
let _Obelowdot : t =                   0x1001ecc  (* U+1ECC LATIN CAPITAL LETTER O WITH DOT BELOW *)
let _obelowdot : t =                   0x1001ecd  (* U+1ECD LATIN SMALL LETTER O WITH DOT BELOW *)
let _Ohook : t =                       0x1001ece  (* U+1ECE LATIN CAPITAL LETTER O WITH HOOK ABOVE *)
let _ohook : t =                       0x1001ecf  (* U+1ECF LATIN SMALL LETTER O WITH HOOK ABOVE *)
let _Ocircumflexacute : t =            0x1001ed0  (* U+1ED0 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE *)
let _ocircumflexacute : t =            0x1001ed1  (* U+1ED1 LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE *)
let _Ocircumflexgrave : t =            0x1001ed2  (* U+1ED2 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE *)
let _ocircumflexgrave : t =            0x1001ed3  (* U+1ED3 LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE *)
let _Ocircumflexhook : t =             0x1001ed4  (* U+1ED4 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE *)
let _ocircumflexhook : t =             0x1001ed5  (* U+1ED5 LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE *)
let _Ocircumflextilde : t =            0x1001ed6  (* U+1ED6 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE *)
let _ocircumflextilde : t =            0x1001ed7  (* U+1ED7 LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE *)
let _Ocircumflexbelowdot : t =         0x1001ed8  (* U+1ED8 LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW *)
let _ocircumflexbelowdot : t =         0x1001ed9  (* U+1ED9 LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW *)
let _Ohornacute : t =                  0x1001eda  (* U+1EDA LATIN CAPITAL LETTER O WITH HORN AND ACUTE *)
let _ohornacute : t =                  0x1001edb  (* U+1EDB LATIN SMALL LETTER O WITH HORN AND ACUTE *)
let _Ohorngrave : t =                  0x1001edc  (* U+1EDC LATIN CAPITAL LETTER O WITH HORN AND GRAVE *)
let _ohorngrave : t =                  0x1001edd  (* U+1EDD LATIN SMALL LETTER O WITH HORN AND GRAVE *)
let _Ohornhook : t =                   0x1001ede  (* U+1EDE LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE *)
let _ohornhook : t =                   0x1001edf  (* U+1EDF LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE *)
let _Ohorntilde : t =                  0x1001ee0  (* U+1EE0 LATIN CAPITAL LETTER O WITH HORN AND TILDE *)
let _ohorntilde : t =                  0x1001ee1  (* U+1EE1 LATIN SMALL LETTER O WITH HORN AND TILDE *)
let _Ohornbelowdot : t =               0x1001ee2  (* U+1EE2 LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW *)
let _ohornbelowdot : t =               0x1001ee3  (* U+1EE3 LATIN SMALL LETTER O WITH HORN AND DOT BELOW *)
let _Ubelowdot : t =                   0x1001ee4  (* U+1EE4 LATIN CAPITAL LETTER U WITH DOT BELOW *)
let _ubelowdot : t =                   0x1001ee5  (* U+1EE5 LATIN SMALL LETTER U WITH DOT BELOW *)
let _Uhook : t =                       0x1001ee6  (* U+1EE6 LATIN CAPITAL LETTER U WITH HOOK ABOVE *)
let _uhook : t =                       0x1001ee7  (* U+1EE7 LATIN SMALL LETTER U WITH HOOK ABOVE *)
let _Uhornacute : t =                  0x1001ee8  (* U+1EE8 LATIN CAPITAL LETTER U WITH HORN AND ACUTE *)
let _uhornacute : t =                  0x1001ee9  (* U+1EE9 LATIN SMALL LETTER U WITH HORN AND ACUTE *)
let _Uhorngrave : t =                  0x1001eea  (* U+1EEA LATIN CAPITAL LETTER U WITH HORN AND GRAVE *)
let _uhorngrave : t =                  0x1001eeb  (* U+1EEB LATIN SMALL LETTER U WITH HORN AND GRAVE *)
let _Uhornhook : t =                   0x1001eec  (* U+1EEC LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE *)
let _uhornhook : t =                   0x1001eed  (* U+1EED LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE *)
let _Uhorntilde : t =                  0x1001eee  (* U+1EEE LATIN CAPITAL LETTER U WITH HORN AND TILDE *)
let _uhorntilde : t =                  0x1001eef  (* U+1EEF LATIN SMALL LETTER U WITH HORN AND TILDE *)
let _Uhornbelowdot : t =               0x1001ef0  (* U+1EF0 LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW *)
let _uhornbelowdot : t =               0x1001ef1  (* U+1EF1 LATIN SMALL LETTER U WITH HORN AND DOT BELOW *)
let _Ybelowdot : t =                   0x1001ef4  (* U+1EF4 LATIN CAPITAL LETTER Y WITH DOT BELOW *)
let _ybelowdot : t =                   0x1001ef5  (* U+1EF5 LATIN SMALL LETTER Y WITH DOT BELOW *)
let _Yhook : t =                       0x1001ef6  (* U+1EF6 LATIN CAPITAL LETTER Y WITH HOOK ABOVE *)
let _yhook : t =                       0x1001ef7  (* U+1EF7 LATIN SMALL LETTER Y WITH HOOK ABOVE *)
let _Ytilde : t =                      0x1001ef8  (* U+1EF8 LATIN CAPITAL LETTER Y WITH TILDE *)
let _ytilde : t =                      0x1001ef9  (* U+1EF9 LATIN SMALL LETTER Y WITH TILDE *)
let _Ohorn : t =                       0x10001a0  (* U+01A0 LATIN CAPITAL LETTER O WITH HORN *)
let _ohorn : t =                       0x10001a1  (* U+01A1 LATIN SMALL LETTER O WITH HORN *)
let _Uhorn : t =                       0x10001af  (* U+01AF LATIN CAPITAL LETTER U WITH HORN *)
let _uhorn : t =                       0x10001b0  (* U+01B0 LATIN SMALL LETTER U WITH HORN *)


let _EcuSign : t =                     0x10020a0  (* U+20A0 EURO-CURRENCY SIGN *)
let _ColonSign : t =                   0x10020a1  (* U+20A1 COLON SIGN *)
let _CruzeiroSign : t =                0x10020a2  (* U+20A2 CRUZEIRO SIGN *)
let _FFrancSign : t =                  0x10020a3  (* U+20A3 FRENCH FRANC SIGN *)
let _LiraSign : t =                    0x10020a4  (* U+20A4 LIRA SIGN *)
let _MillSign : t =                    0x10020a5  (* U+20A5 MILL SIGN *)
let _NairaSign : t =                   0x10020a6  (* U+20A6 NAIRA SIGN *)
let _PesetaSign : t =                  0x10020a7  (* U+20A7 PESETA SIGN *)
let _RupeeSign : t =                   0x10020a8  (* U+20A8 RUPEE SIGN *)
let _WonSign : t =                     0x10020a9  (* U+20A9 WON SIGN *)
let _NewSheqelSign : t =               0x10020aa  (* U+20AA NEW SHEQEL SIGN *)
let _DongSign : t =                    0x10020ab  (* U+20AB DONG SIGN *)
let _EuroSign : t =                       0x20ac  (* U+20AC EURO SIGN *)

(* one, two and three are defined above. *)
let _zerosuperior : t =                0x1002070  (* U+2070 SUPERSCRIPT ZERO *)
let _foursuperior : t =                0x1002074  (* U+2074 SUPERSCRIPT FOUR *)
let _fivesuperior : t =                0x1002075  (* U+2075 SUPERSCRIPT FIVE *)
let _sixsuperior : t =                 0x1002076  (* U+2076 SUPERSCRIPT SIX *)
let _sevensuperior : t =               0x1002077  (* U+2077 SUPERSCRIPT SEVEN *)
let _eightsuperior : t =               0x1002078  (* U+2078 SUPERSCRIPT EIGHT *)
let _ninesuperior : t =                0x1002079  (* U+2079 SUPERSCRIPT NINE *)
let _zerosubscript : t =               0x1002080  (* U+2080 SUBSCRIPT ZERO *)
let _onesubscript : t =                0x1002081  (* U+2081 SUBSCRIPT ONE *)
let _twosubscript : t =                0x1002082  (* U+2082 SUBSCRIPT TWO *)
let _threesubscript : t =              0x1002083  (* U+2083 SUBSCRIPT THREE *)
let _foursubscript : t =               0x1002084  (* U+2084 SUBSCRIPT FOUR *)
let _fivesubscript : t =               0x1002085  (* U+2085 SUBSCRIPT FIVE *)
let _sixsubscript : t =                0x1002086  (* U+2086 SUBSCRIPT SIX *)
let _sevensubscript : t =              0x1002087  (* U+2087 SUBSCRIPT SEVEN *)
let _eightsubscript : t =              0x1002088  (* U+2088 SUBSCRIPT EIGHT *)
let _ninesubscript : t =               0x1002089  (* U+2089 SUBSCRIPT NINE *)
let _partdifferential : t =            0x1002202  (* U+2202 PARTIAL DIFFERENTIAL *)
let _emptyset : t =                    0x1002205  (* U+2205 NULL SET *)
let _elementof : t =                   0x1002208  (* U+2208 ELEMENT OF *)
let _notelementof : t =                0x1002209  (* U+2209 NOT AN ELEMENT OF *)
let _containsas : t =                  0x100220B  (* U+220B CONTAINS AS MEMBER *)
let _squareroot : t =                  0x100221A  (* U+221A SQUARE ROOT *)
let _cuberoot : t =                    0x100221B  (* U+221B CUBE ROOT *)
let _fourthroot : t =                  0x100221C  (* U+221C FOURTH ROOT *)
let _dintegral : t =                   0x100222C  (* U+222C DOUBLE INTEGRAL *)
let _tintegral : t =                   0x100222D  (* U+222D TRIPLE INTEGRAL *)
let _because : t =                     0x1002235  (* U+2235 BECAUSE *)
let _approxeq : t =                    0x1002248  (* U+2245 ALMOST EQUAL TO *)
let _notapproxeq : t =                 0x1002247  (* U+2247 NOT ALMOST EQUAL TO *)
let _notidentical : t =                0x1002262  (* U+2262 NOT IDENTICAL TO *)
let _stricteq : t =                    0x1002263  (* U+2263 STRICTLY EQUIVALENT TO *)          

let _braille_dot_1 : t =                  0xfff1
let _braille_dot_2 : t =                  0xfff2
let _braille_dot_3 : t =                  0xfff3
let _braille_dot_4 : t =                  0xfff4
let _braille_dot_5 : t =                  0xfff5
let _braille_dot_6 : t =                  0xfff6
let _braille_dot_7 : t =                  0xfff7
let _braille_dot_8 : t =                  0xfff8
let _braille_dot_9 : t =                  0xfff9
let _braille_dot_10 : t =                 0xfffa
let _braille_blank : t =               0x1002800  (* U+2800 BRAILLE PATTERN BLANK *)
let _braille_dots_1 : t =              0x1002801  (* U+2801 BRAILLE PATTERN DOTS-1 *)
let _braille_dots_2 : t =              0x1002802  (* U+2802 BRAILLE PATTERN DOTS-2 *)
let _braille_dots_12 : t =             0x1002803  (* U+2803 BRAILLE PATTERN DOTS-12 *)
let _braille_dots_3 : t =              0x1002804  (* U+2804 BRAILLE PATTERN DOTS-3 *)
let _braille_dots_13 : t =             0x1002805  (* U+2805 BRAILLE PATTERN DOTS-13 *)
let _braille_dots_23 : t =             0x1002806  (* U+2806 BRAILLE PATTERN DOTS-23 *)
let _braille_dots_123 : t =            0x1002807  (* U+2807 BRAILLE PATTERN DOTS-123 *)
let _braille_dots_4 : t =              0x1002808  (* U+2808 BRAILLE PATTERN DOTS-4 *)
let _braille_dots_14 : t =             0x1002809  (* U+2809 BRAILLE PATTERN DOTS-14 *)
let _braille_dots_24 : t =             0x100280a  (* U+280a BRAILLE PATTERN DOTS-24 *)
let _braille_dots_124 : t =            0x100280b  (* U+280b BRAILLE PATTERN DOTS-124 *)
let _braille_dots_34 : t =             0x100280c  (* U+280c BRAILLE PATTERN DOTS-34 *)
let _braille_dots_134 : t =            0x100280d  (* U+280d BRAILLE PATTERN DOTS-134 *)
let _braille_dots_234 : t =            0x100280e  (* U+280e BRAILLE PATTERN DOTS-234 *)
let _braille_dots_1234 : t =           0x100280f  (* U+280f BRAILLE PATTERN DOTS-1234 *)
let _braille_dots_5 : t =              0x1002810  (* U+2810 BRAILLE PATTERN DOTS-5 *)
let _braille_dots_15 : t =             0x1002811  (* U+2811 BRAILLE PATTERN DOTS-15 *)
let _braille_dots_25 : t =             0x1002812  (* U+2812 BRAILLE PATTERN DOTS-25 *)
let _braille_dots_125 : t =            0x1002813  (* U+2813 BRAILLE PATTERN DOTS-125 *)
let _braille_dots_35 : t =             0x1002814  (* U+2814 BRAILLE PATTERN DOTS-35 *)
let _braille_dots_135 : t =            0x1002815  (* U+2815 BRAILLE PATTERN DOTS-135 *)
let _braille_dots_235 : t =            0x1002816  (* U+2816 BRAILLE PATTERN DOTS-235 *)
let _braille_dots_1235 : t =           0x1002817  (* U+2817 BRAILLE PATTERN DOTS-1235 *)
let _braille_dots_45 : t =             0x1002818  (* U+2818 BRAILLE PATTERN DOTS-45 *)
let _braille_dots_145 : t =            0x1002819  (* U+2819 BRAILLE PATTERN DOTS-145 *)
let _braille_dots_245 : t =            0x100281a  (* U+281a BRAILLE PATTERN DOTS-245 *)
let _braille_dots_1245 : t =           0x100281b  (* U+281b BRAILLE PATTERN DOTS-1245 *)
let _braille_dots_345 : t =            0x100281c  (* U+281c BRAILLE PATTERN DOTS-345 *)
let _braille_dots_1345 : t =           0x100281d  (* U+281d BRAILLE PATTERN DOTS-1345 *)
let _braille_dots_2345 : t =           0x100281e  (* U+281e BRAILLE PATTERN DOTS-2345 *)
let _braille_dots_12345 : t =          0x100281f  (* U+281f BRAILLE PATTERN DOTS-12345 *)
let _braille_dots_6 : t =              0x1002820  (* U+2820 BRAILLE PATTERN DOTS-6 *)
let _braille_dots_16 : t =             0x1002821  (* U+2821 BRAILLE PATTERN DOTS-16 *)
let _braille_dots_26 : t =             0x1002822  (* U+2822 BRAILLE PATTERN DOTS-26 *)
let _braille_dots_126 : t =            0x1002823  (* U+2823 BRAILLE PATTERN DOTS-126 *)
let _braille_dots_36 : t =             0x1002824  (* U+2824 BRAILLE PATTERN DOTS-36 *)
let _braille_dots_136 : t =            0x1002825  (* U+2825 BRAILLE PATTERN DOTS-136 *)
let _braille_dots_236 : t =            0x1002826  (* U+2826 BRAILLE PATTERN DOTS-236 *)
let _braille_dots_1236 : t =           0x1002827  (* U+2827 BRAILLE PATTERN DOTS-1236 *)
let _braille_dots_46 : t =             0x1002828  (* U+2828 BRAILLE PATTERN DOTS-46 *)
let _braille_dots_146 : t =            0x1002829  (* U+2829 BRAILLE PATTERN DOTS-146 *)
let _braille_dots_246 : t =            0x100282a  (* U+282a BRAILLE PATTERN DOTS-246 *)
let _braille_dots_1246 : t =           0x100282b  (* U+282b BRAILLE PATTERN DOTS-1246 *)
let _braille_dots_346 : t =            0x100282c  (* U+282c BRAILLE PATTERN DOTS-346 *)
let _braille_dots_1346 : t =           0x100282d  (* U+282d BRAILLE PATTERN DOTS-1346 *)
let _braille_dots_2346 : t =           0x100282e  (* U+282e BRAILLE PATTERN DOTS-2346 *)
let _braille_dots_12346 : t =          0x100282f  (* U+282f BRAILLE PATTERN DOTS-12346 *)
let _braille_dots_56 : t =             0x1002830  (* U+2830 BRAILLE PATTERN DOTS-56 *)
let _braille_dots_156 : t =            0x1002831  (* U+2831 BRAILLE PATTERN DOTS-156 *)
let _braille_dots_256 : t =            0x1002832  (* U+2832 BRAILLE PATTERN DOTS-256 *)
let _braille_dots_1256 : t =           0x1002833  (* U+2833 BRAILLE PATTERN DOTS-1256 *)
let _braille_dots_356 : t =            0x1002834  (* U+2834 BRAILLE PATTERN DOTS-356 *)
let _braille_dots_1356 : t =           0x1002835  (* U+2835 BRAILLE PATTERN DOTS-1356 *)
let _braille_dots_2356 : t =           0x1002836  (* U+2836 BRAILLE PATTERN DOTS-2356 *)
let _braille_dots_12356 : t =          0x1002837  (* U+2837 BRAILLE PATTERN DOTS-12356 *)
let _braille_dots_456 : t =            0x1002838  (* U+2838 BRAILLE PATTERN DOTS-456 *)
let _braille_dots_1456 : t =           0x1002839  (* U+2839 BRAILLE PATTERN DOTS-1456 *)
let _braille_dots_2456 : t =           0x100283a  (* U+283a BRAILLE PATTERN DOTS-2456 *)
let _braille_dots_12456 : t =          0x100283b  (* U+283b BRAILLE PATTERN DOTS-12456 *)
let _braille_dots_3456 : t =           0x100283c  (* U+283c BRAILLE PATTERN DOTS-3456 *)
let _braille_dots_13456 : t =          0x100283d  (* U+283d BRAILLE PATTERN DOTS-13456 *)
let _braille_dots_23456 : t =          0x100283e  (* U+283e BRAILLE PATTERN DOTS-23456 *)
let _braille_dots_123456 : t =         0x100283f  (* U+283f BRAILLE PATTERN DOTS-123456 *)
let _braille_dots_7 : t =              0x1002840  (* U+2840 BRAILLE PATTERN DOTS-7 *)
let _braille_dots_17 : t =             0x1002841  (* U+2841 BRAILLE PATTERN DOTS-17 *)
let _braille_dots_27 : t =             0x1002842  (* U+2842 BRAILLE PATTERN DOTS-27 *)
let _braille_dots_127 : t =            0x1002843  (* U+2843 BRAILLE PATTERN DOTS-127 *)
let _braille_dots_37 : t =             0x1002844  (* U+2844 BRAILLE PATTERN DOTS-37 *)
let _braille_dots_137 : t =            0x1002845  (* U+2845 BRAILLE PATTERN DOTS-137 *)
let _braille_dots_237 : t =            0x1002846  (* U+2846 BRAILLE PATTERN DOTS-237 *)
let _braille_dots_1237 : t =           0x1002847  (* U+2847 BRAILLE PATTERN DOTS-1237 *)
let _braille_dots_47 : t =             0x1002848  (* U+2848 BRAILLE PATTERN DOTS-47 *)
let _braille_dots_147 : t =            0x1002849  (* U+2849 BRAILLE PATTERN DOTS-147 *)
let _braille_dots_247 : t =            0x100284a  (* U+284a BRAILLE PATTERN DOTS-247 *)
let _braille_dots_1247 : t =           0x100284b  (* U+284b BRAILLE PATTERN DOTS-1247 *)
let _braille_dots_347 : t =            0x100284c  (* U+284c BRAILLE PATTERN DOTS-347 *)
let _braille_dots_1347 : t =           0x100284d  (* U+284d BRAILLE PATTERN DOTS-1347 *)
let _braille_dots_2347 : t =           0x100284e  (* U+284e BRAILLE PATTERN DOTS-2347 *)
let _braille_dots_12347 : t =          0x100284f  (* U+284f BRAILLE PATTERN DOTS-12347 *)
let _braille_dots_57 : t =             0x1002850  (* U+2850 BRAILLE PATTERN DOTS-57 *)
let _braille_dots_157 : t =            0x1002851  (* U+2851 BRAILLE PATTERN DOTS-157 *)
let _braille_dots_257 : t =            0x1002852  (* U+2852 BRAILLE PATTERN DOTS-257 *)
let _braille_dots_1257 : t =           0x1002853  (* U+2853 BRAILLE PATTERN DOTS-1257 *)
let _braille_dots_357 : t =            0x1002854  (* U+2854 BRAILLE PATTERN DOTS-357 *)
let _braille_dots_1357 : t =           0x1002855  (* U+2855 BRAILLE PATTERN DOTS-1357 *)
let _braille_dots_2357 : t =           0x1002856  (* U+2856 BRAILLE PATTERN DOTS-2357 *)
let _braille_dots_12357 : t =          0x1002857  (* U+2857 BRAILLE PATTERN DOTS-12357 *)
let _braille_dots_457 : t =            0x1002858  (* U+2858 BRAILLE PATTERN DOTS-457 *)
let _braille_dots_1457 : t =           0x1002859  (* U+2859 BRAILLE PATTERN DOTS-1457 *)
let _braille_dots_2457 : t =           0x100285a  (* U+285a BRAILLE PATTERN DOTS-2457 *)
let _braille_dots_12457 : t =          0x100285b  (* U+285b BRAILLE PATTERN DOTS-12457 *)
let _braille_dots_3457 : t =           0x100285c  (* U+285c BRAILLE PATTERN DOTS-3457 *)
let _braille_dots_13457 : t =          0x100285d  (* U+285d BRAILLE PATTERN DOTS-13457 *)
let _braille_dots_23457 : t =          0x100285e  (* U+285e BRAILLE PATTERN DOTS-23457 *)
let _braille_dots_123457 : t =         0x100285f  (* U+285f BRAILLE PATTERN DOTS-123457 *)
let _braille_dots_67 : t =             0x1002860  (* U+2860 BRAILLE PATTERN DOTS-67 *)
let _braille_dots_167 : t =            0x1002861  (* U+2861 BRAILLE PATTERN DOTS-167 *)
let _braille_dots_267 : t =            0x1002862  (* U+2862 BRAILLE PATTERN DOTS-267 *)
let _braille_dots_1267 : t =           0x1002863  (* U+2863 BRAILLE PATTERN DOTS-1267 *)
let _braille_dots_367 : t =            0x1002864  (* U+2864 BRAILLE PATTERN DOTS-367 *)
let _braille_dots_1367 : t =           0x1002865  (* U+2865 BRAILLE PATTERN DOTS-1367 *)
let _braille_dots_2367 : t =           0x1002866  (* U+2866 BRAILLE PATTERN DOTS-2367 *)
let _braille_dots_12367 : t =          0x1002867  (* U+2867 BRAILLE PATTERN DOTS-12367 *)
let _braille_dots_467 : t =            0x1002868  (* U+2868 BRAILLE PATTERN DOTS-467 *)
let _braille_dots_1467 : t =           0x1002869  (* U+2869 BRAILLE PATTERN DOTS-1467 *)
let _braille_dots_2467 : t =           0x100286a  (* U+286a BRAILLE PATTERN DOTS-2467 *)
let _braille_dots_12467 : t =          0x100286b  (* U+286b BRAILLE PATTERN DOTS-12467 *)
let _braille_dots_3467 : t =           0x100286c  (* U+286c BRAILLE PATTERN DOTS-3467 *)
let _braille_dots_13467 : t =          0x100286d  (* U+286d BRAILLE PATTERN DOTS-13467 *)
let _braille_dots_23467 : t =          0x100286e  (* U+286e BRAILLE PATTERN DOTS-23467 *)
let _braille_dots_123467 : t =         0x100286f  (* U+286f BRAILLE PATTERN DOTS-123467 *)
let _braille_dots_567 : t =            0x1002870  (* U+2870 BRAILLE PATTERN DOTS-567 *)
let _braille_dots_1567 : t =           0x1002871  (* U+2871 BRAILLE PATTERN DOTS-1567 *)
let _braille_dots_2567 : t =           0x1002872  (* U+2872 BRAILLE PATTERN DOTS-2567 *)
let _braille_dots_12567 : t =          0x1002873  (* U+2873 BRAILLE PATTERN DOTS-12567 *)
let _braille_dots_3567 : t =           0x1002874  (* U+2874 BRAILLE PATTERN DOTS-3567 *)
let _braille_dots_13567 : t =          0x1002875  (* U+2875 BRAILLE PATTERN DOTS-13567 *)
let _braille_dots_23567 : t =          0x1002876  (* U+2876 BRAILLE PATTERN DOTS-23567 *)
let _braille_dots_123567 : t =         0x1002877  (* U+2877 BRAILLE PATTERN DOTS-123567 *)
let _braille_dots_4567 : t =           0x1002878  (* U+2878 BRAILLE PATTERN DOTS-4567 *)
let _braille_dots_14567 : t =          0x1002879  (* U+2879 BRAILLE PATTERN DOTS-14567 *)
let _braille_dots_24567 : t =          0x100287a  (* U+287a BRAILLE PATTERN DOTS-24567 *)
let _braille_dots_124567 : t =         0x100287b  (* U+287b BRAILLE PATTERN DOTS-124567 *)
let _braille_dots_34567 : t =          0x100287c  (* U+287c BRAILLE PATTERN DOTS-34567 *)
let _braille_dots_134567 : t =         0x100287d  (* U+287d BRAILLE PATTERN DOTS-134567 *)
let _braille_dots_234567 : t =         0x100287e  (* U+287e BRAILLE PATTERN DOTS-234567 *)
let _braille_dots_1234567 : t =        0x100287f  (* U+287f BRAILLE PATTERN DOTS-1234567 *)
let _braille_dots_8 : t =              0x1002880  (* U+2880 BRAILLE PATTERN DOTS-8 *)
let _braille_dots_18 : t =             0x1002881  (* U+2881 BRAILLE PATTERN DOTS-18 *)
let _braille_dots_28 : t =             0x1002882  (* U+2882 BRAILLE PATTERN DOTS-28 *)
let _braille_dots_128 : t =            0x1002883  (* U+2883 BRAILLE PATTERN DOTS-128 *)
let _braille_dots_38 : t =             0x1002884  (* U+2884 BRAILLE PATTERN DOTS-38 *)
let _braille_dots_138 : t =            0x1002885  (* U+2885 BRAILLE PATTERN DOTS-138 *)
let _braille_dots_238 : t =            0x1002886  (* U+2886 BRAILLE PATTERN DOTS-238 *)
let _braille_dots_1238 : t =           0x1002887  (* U+2887 BRAILLE PATTERN DOTS-1238 *)
let _braille_dots_48 : t =             0x1002888  (* U+2888 BRAILLE PATTERN DOTS-48 *)
let _braille_dots_148 : t =            0x1002889  (* U+2889 BRAILLE PATTERN DOTS-148 *)
let _braille_dots_248 : t =            0x100288a  (* U+288a BRAILLE PATTERN DOTS-248 *)
let _braille_dots_1248 : t =           0x100288b  (* U+288b BRAILLE PATTERN DOTS-1248 *)
let _braille_dots_348 : t =            0x100288c  (* U+288c BRAILLE PATTERN DOTS-348 *)
let _braille_dots_1348 : t =           0x100288d  (* U+288d BRAILLE PATTERN DOTS-1348 *)
let _braille_dots_2348 : t =           0x100288e  (* U+288e BRAILLE PATTERN DOTS-2348 *)
let _braille_dots_12348 : t =          0x100288f  (* U+288f BRAILLE PATTERN DOTS-12348 *)
let _braille_dots_58 : t =             0x1002890  (* U+2890 BRAILLE PATTERN DOTS-58 *)
let _braille_dots_158 : t =            0x1002891  (* U+2891 BRAILLE PATTERN DOTS-158 *)
let _braille_dots_258 : t =            0x1002892  (* U+2892 BRAILLE PATTERN DOTS-258 *)
let _braille_dots_1258 : t =           0x1002893  (* U+2893 BRAILLE PATTERN DOTS-1258 *)
let _braille_dots_358 : t =            0x1002894  (* U+2894 BRAILLE PATTERN DOTS-358 *)
let _braille_dots_1358 : t =           0x1002895  (* U+2895 BRAILLE PATTERN DOTS-1358 *)
let _braille_dots_2358 : t =           0x1002896  (* U+2896 BRAILLE PATTERN DOTS-2358 *)
let _braille_dots_12358 : t =          0x1002897  (* U+2897 BRAILLE PATTERN DOTS-12358 *)
let _braille_dots_458 : t =            0x1002898  (* U+2898 BRAILLE PATTERN DOTS-458 *)
let _braille_dots_1458 : t =           0x1002899  (* U+2899 BRAILLE PATTERN DOTS-1458 *)
let _braille_dots_2458 : t =           0x100289a  (* U+289a BRAILLE PATTERN DOTS-2458 *)
let _braille_dots_12458 : t =          0x100289b  (* U+289b BRAILLE PATTERN DOTS-12458 *)
let _braille_dots_3458 : t =           0x100289c  (* U+289c BRAILLE PATTERN DOTS-3458 *)
let _braille_dots_13458 : t =          0x100289d  (* U+289d BRAILLE PATTERN DOTS-13458 *)
let _braille_dots_23458 : t =          0x100289e  (* U+289e BRAILLE PATTERN DOTS-23458 *)
let _braille_dots_123458 : t =         0x100289f  (* U+289f BRAILLE PATTERN DOTS-123458 *)
let _braille_dots_68 : t =             0x10028a0  (* U+28a0 BRAILLE PATTERN DOTS-68 *)
let _braille_dots_168 : t =            0x10028a1  (* U+28a1 BRAILLE PATTERN DOTS-168 *)
let _braille_dots_268 : t =            0x10028a2  (* U+28a2 BRAILLE PATTERN DOTS-268 *)
let _braille_dots_1268 : t =           0x10028a3  (* U+28a3 BRAILLE PATTERN DOTS-1268 *)
let _braille_dots_368 : t =            0x10028a4  (* U+28a4 BRAILLE PATTERN DOTS-368 *)
let _braille_dots_1368 : t =           0x10028a5  (* U+28a5 BRAILLE PATTERN DOTS-1368 *)
let _braille_dots_2368 : t =           0x10028a6  (* U+28a6 BRAILLE PATTERN DOTS-2368 *)
let _braille_dots_12368 : t =          0x10028a7  (* U+28a7 BRAILLE PATTERN DOTS-12368 *)
let _braille_dots_468 : t =            0x10028a8  (* U+28a8 BRAILLE PATTERN DOTS-468 *)
let _braille_dots_1468 : t =           0x10028a9  (* U+28a9 BRAILLE PATTERN DOTS-1468 *)
let _braille_dots_2468 : t =           0x10028aa  (* U+28aa BRAILLE PATTERN DOTS-2468 *)
let _braille_dots_12468 : t =          0x10028ab  (* U+28ab BRAILLE PATTERN DOTS-12468 *)
let _braille_dots_3468 : t =           0x10028ac  (* U+28ac BRAILLE PATTERN DOTS-3468 *)
let _braille_dots_13468 : t =          0x10028ad  (* U+28ad BRAILLE PATTERN DOTS-13468 *)
let _braille_dots_23468 : t =          0x10028ae  (* U+28ae BRAILLE PATTERN DOTS-23468 *)
let _braille_dots_123468 : t =         0x10028af  (* U+28af BRAILLE PATTERN DOTS-123468 *)
let _braille_dots_568 : t =            0x10028b0  (* U+28b0 BRAILLE PATTERN DOTS-568 *)
let _braille_dots_1568 : t =           0x10028b1  (* U+28b1 BRAILLE PATTERN DOTS-1568 *)
let _braille_dots_2568 : t =           0x10028b2  (* U+28b2 BRAILLE PATTERN DOTS-2568 *)
let _braille_dots_12568 : t =          0x10028b3  (* U+28b3 BRAILLE PATTERN DOTS-12568 *)
let _braille_dots_3568 : t =           0x10028b4  (* U+28b4 BRAILLE PATTERN DOTS-3568 *)
let _braille_dots_13568 : t =          0x10028b5  (* U+28b5 BRAILLE PATTERN DOTS-13568 *)
let _braille_dots_23568 : t =          0x10028b6  (* U+28b6 BRAILLE PATTERN DOTS-23568 *)
let _braille_dots_123568 : t =         0x10028b7  (* U+28b7 BRAILLE PATTERN DOTS-123568 *)
let _braille_dots_4568 : t =           0x10028b8  (* U+28b8 BRAILLE PATTERN DOTS-4568 *)
let _braille_dots_14568 : t =          0x10028b9  (* U+28b9 BRAILLE PATTERN DOTS-14568 *)
let _braille_dots_24568 : t =          0x10028ba  (* U+28ba BRAILLE PATTERN DOTS-24568 *)
let _braille_dots_124568 : t =         0x10028bb  (* U+28bb BRAILLE PATTERN DOTS-124568 *)
let _braille_dots_34568 : t =          0x10028bc  (* U+28bc BRAILLE PATTERN DOTS-34568 *)
let _braille_dots_134568 : t =         0x10028bd  (* U+28bd BRAILLE PATTERN DOTS-134568 *)
let _braille_dots_234568 : t =         0x10028be  (* U+28be BRAILLE PATTERN DOTS-234568 *)
let _braille_dots_1234568 : t =        0x10028bf  (* U+28bf BRAILLE PATTERN DOTS-1234568 *)
let _braille_dots_78 : t =             0x10028c0  (* U+28c0 BRAILLE PATTERN DOTS-78 *)
let _braille_dots_178 : t =            0x10028c1  (* U+28c1 BRAILLE PATTERN DOTS-178 *)
let _braille_dots_278 : t =            0x10028c2  (* U+28c2 BRAILLE PATTERN DOTS-278 *)
let _braille_dots_1278 : t =           0x10028c3  (* U+28c3 BRAILLE PATTERN DOTS-1278 *)
let _braille_dots_378 : t =            0x10028c4  (* U+28c4 BRAILLE PATTERN DOTS-378 *)
let _braille_dots_1378 : t =           0x10028c5  (* U+28c5 BRAILLE PATTERN DOTS-1378 *)
let _braille_dots_2378 : t =           0x10028c6  (* U+28c6 BRAILLE PATTERN DOTS-2378 *)
let _braille_dots_12378 : t =          0x10028c7  (* U+28c7 BRAILLE PATTERN DOTS-12378 *)
let _braille_dots_478 : t =            0x10028c8  (* U+28c8 BRAILLE PATTERN DOTS-478 *)
let _braille_dots_1478 : t =           0x10028c9  (* U+28c9 BRAILLE PATTERN DOTS-1478 *)
let _braille_dots_2478 : t =           0x10028ca  (* U+28ca BRAILLE PATTERN DOTS-2478 *)
let _braille_dots_12478 : t =          0x10028cb  (* U+28cb BRAILLE PATTERN DOTS-12478 *)
let _braille_dots_3478 : t =           0x10028cc  (* U+28cc BRAILLE PATTERN DOTS-3478 *)
let _braille_dots_13478 : t =          0x10028cd  (* U+28cd BRAILLE PATTERN DOTS-13478 *)
let _braille_dots_23478 : t =          0x10028ce  (* U+28ce BRAILLE PATTERN DOTS-23478 *)
let _braille_dots_123478 : t =         0x10028cf  (* U+28cf BRAILLE PATTERN DOTS-123478 *)
let _braille_dots_578 : t =            0x10028d0  (* U+28d0 BRAILLE PATTERN DOTS-578 *)
let _braille_dots_1578 : t =           0x10028d1  (* U+28d1 BRAILLE PATTERN DOTS-1578 *)
let _braille_dots_2578 : t =           0x10028d2  (* U+28d2 BRAILLE PATTERN DOTS-2578 *)
let _braille_dots_12578 : t =          0x10028d3  (* U+28d3 BRAILLE PATTERN DOTS-12578 *)
let _braille_dots_3578 : t =           0x10028d4  (* U+28d4 BRAILLE PATTERN DOTS-3578 *)
let _braille_dots_13578 : t =          0x10028d5  (* U+28d5 BRAILLE PATTERN DOTS-13578 *)
let _braille_dots_23578 : t =          0x10028d6  (* U+28d6 BRAILLE PATTERN DOTS-23578 *)
let _braille_dots_123578 : t =         0x10028d7  (* U+28d7 BRAILLE PATTERN DOTS-123578 *)
let _braille_dots_4578 : t =           0x10028d8  (* U+28d8 BRAILLE PATTERN DOTS-4578 *)
let _braille_dots_14578 : t =          0x10028d9  (* U+28d9 BRAILLE PATTERN DOTS-14578 *)
let _braille_dots_24578 : t =          0x10028da  (* U+28da BRAILLE PATTERN DOTS-24578 *)
let _braille_dots_124578 : t =         0x10028db  (* U+28db BRAILLE PATTERN DOTS-124578 *)
let _braille_dots_34578 : t =          0x10028dc  (* U+28dc BRAILLE PATTERN DOTS-34578 *)
let _braille_dots_134578 : t =         0x10028dd  (* U+28dd BRAILLE PATTERN DOTS-134578 *)
let _braille_dots_234578 : t =         0x10028de  (* U+28de BRAILLE PATTERN DOTS-234578 *)
let _braille_dots_1234578 : t =        0x10028df  (* U+28df BRAILLE PATTERN DOTS-1234578 *)
let _braille_dots_678 : t =            0x10028e0  (* U+28e0 BRAILLE PATTERN DOTS-678 *)
let _braille_dots_1678 : t =           0x10028e1  (* U+28e1 BRAILLE PATTERN DOTS-1678 *)
let _braille_dots_2678 : t =           0x10028e2  (* U+28e2 BRAILLE PATTERN DOTS-2678 *)
let _braille_dots_12678 : t =          0x10028e3  (* U+28e3 BRAILLE PATTERN DOTS-12678 *)
let _braille_dots_3678 : t =           0x10028e4  (* U+28e4 BRAILLE PATTERN DOTS-3678 *)
let _braille_dots_13678 : t =          0x10028e5  (* U+28e5 BRAILLE PATTERN DOTS-13678 *)
let _braille_dots_23678 : t =          0x10028e6  (* U+28e6 BRAILLE PATTERN DOTS-23678 *)
let _braille_dots_123678 : t =         0x10028e7  (* U+28e7 BRAILLE PATTERN DOTS-123678 *)
let _braille_dots_4678 : t =           0x10028e8  (* U+28e8 BRAILLE PATTERN DOTS-4678 *)
let _braille_dots_14678 : t =          0x10028e9  (* U+28e9 BRAILLE PATTERN DOTS-14678 *)
let _braille_dots_24678 : t =          0x10028ea  (* U+28ea BRAILLE PATTERN DOTS-24678 *)
let _braille_dots_124678 : t =         0x10028eb  (* U+28eb BRAILLE PATTERN DOTS-124678 *)
let _braille_dots_34678 : t =          0x10028ec  (* U+28ec BRAILLE PATTERN DOTS-34678 *)
let _braille_dots_134678 : t =         0x10028ed  (* U+28ed BRAILLE PATTERN DOTS-134678 *)
let _braille_dots_234678 : t =         0x10028ee  (* U+28ee BRAILLE PATTERN DOTS-234678 *)
let _braille_dots_1234678 : t =        0x10028ef  (* U+28ef BRAILLE PATTERN DOTS-1234678 *)
let _braille_dots_5678 : t =           0x10028f0  (* U+28f0 BRAILLE PATTERN DOTS-5678 *)
let _braille_dots_15678 : t =          0x10028f1  (* U+28f1 BRAILLE PATTERN DOTS-15678 *)
let _braille_dots_25678 : t =          0x10028f2  (* U+28f2 BRAILLE PATTERN DOTS-25678 *)
let _braille_dots_125678 : t =         0x10028f3  (* U+28f3 BRAILLE PATTERN DOTS-125678 *)
let _braille_dots_35678 : t =          0x10028f4  (* U+28f4 BRAILLE PATTERN DOTS-35678 *)
let _braille_dots_135678 : t =         0x10028f5  (* U+28f5 BRAILLE PATTERN DOTS-135678 *)
let _braille_dots_235678 : t =         0x10028f6  (* U+28f6 BRAILLE PATTERN DOTS-235678 *)
let _braille_dots_1235678 : t =        0x10028f7  (* U+28f7 BRAILLE PATTERN DOTS-1235678 *)
let _braille_dots_45678 : t =          0x10028f8  (* U+28f8 BRAILLE PATTERN DOTS-45678 *)
let _braille_dots_145678 : t =         0x10028f9  (* U+28f9 BRAILLE PATTERN DOTS-145678 *)
let _braille_dots_245678 : t =         0x10028fa  (* U+28fa BRAILLE PATTERN DOTS-245678 *)
let _braille_dots_1245678 : t =        0x10028fb  (* U+28fb BRAILLE PATTERN DOTS-1245678 *)
let _braille_dots_345678 : t =         0x10028fc  (* U+28fc BRAILLE PATTERN DOTS-345678 *)
let _braille_dots_1345678 : t =        0x10028fd  (* U+28fd BRAILLE PATTERN DOTS-1345678 *)
let _braille_dots_2345678 : t =        0x10028fe  (* U+28fe BRAILLE PATTERN DOTS-2345678 *)
let _braille_dots_12345678 : t =       0x10028ff  (* U+28ff BRAILLE PATTERN DOTS-12345678 *)

(*
 * Sinhala (http://unicode.org/charts/PDF/U0D80.pdf)
 * http://www.nongnu.org/sinhala/doc/transliteration/sinhala-transliteration_6.html
 *)

let _Sinh_ng : t =             0x1000d82  (* U+0D82 SINHALA ANUSVARAYA *)
let _Sinh_h2 : t =             0x1000d83  (* U+0D83 SINHALA VISARGAYA *)
let _Sinh_a : t =              0x1000d85  (* U+0D85 SINHALA AYANNA *)
let _Sinh_aa : t =             0x1000d86  (* U+0D86 SINHALA AAYANNA *)
let _Sinh_ae : t =             0x1000d87  (* U+0D87 SINHALA AEYANNA *)
let _Sinh_aee : t =            0x1000d88  (* U+0D88 SINHALA AEEYANNA *)
let _Sinh_i : t =              0x1000d89  (* U+0D89 SINHALA IYANNA *)
let _Sinh_ii : t =             0x1000d8a  (* U+0D8A SINHALA IIYANNA *)
let _Sinh_u : t =              0x1000d8b  (* U+0D8B SINHALA UYANNA *)
let _Sinh_uu : t =             0x1000d8c  (* U+0D8C SINHALA UUYANNA *)
let _Sinh_ri : t =             0x1000d8d  (* U+0D8D SINHALA IRUYANNA *)
let _Sinh_rii : t =            0x1000d8e  (* U+0D8E SINHALA IRUUYANNA *)
let _Sinh_lu : t =             0x1000d8f  (* U+0D8F SINHALA ILUYANNA *)
let _Sinh_luu : t =            0x1000d90  (* U+0D90 SINHALA ILUUYANNA *)
let _Sinh_e : t =              0x1000d91  (* U+0D91 SINHALA EYANNA *)
let _Sinh_ee : t =             0x1000d92  (* U+0D92 SINHALA EEYANNA *)
let _Sinh_ai : t =             0x1000d93  (* U+0D93 SINHALA AIYANNA *)
let _Sinh_o : t =              0x1000d94  (* U+0D94 SINHALA OYANNA *)
let _Sinh_oo : t =             0x1000d95  (* U+0D95 SINHALA OOYANNA *)
let _Sinh_au : t =             0x1000d96  (* U+0D96 SINHALA AUYANNA *)
let _Sinh_ka : t =             0x1000d9a  (* U+0D9A SINHALA KAYANNA *)
let _Sinh_kha : t =            0x1000d9b  (* U+0D9B SINHALA MAHA. KAYANNA *)
let _Sinh_ga : t =             0x1000d9c  (* U+0D9C SINHALA GAYANNA *)
let _Sinh_gha : t =            0x1000d9d  (* U+0D9D SINHALA MAHA. GAYANNA *)
let _Sinh_ng2 : t =            0x1000d9e  (* U+0D9E SINHALA KANTAJA NAASIKYAYA *)
let _Sinh_nga : t =            0x1000d9f  (* U+0D9F SINHALA SANYAKA GAYANNA *)
let _Sinh_ca : t =             0x1000da0  (* U+0DA0 SINHALA CAYANNA *)
let _Sinh_cha : t =            0x1000da1  (* U+0DA1 SINHALA MAHA. CAYANNA *)
let _Sinh_ja : t =             0x1000da2  (* U+0DA2 SINHALA JAYANNA *)
let _Sinh_jha : t =            0x1000da3  (* U+0DA3 SINHALA MAHA. JAYANNA *)
let _Sinh_nya : t =            0x1000da4  (* U+0DA4 SINHALA TAALUJA NAASIKYAYA *)
let _Sinh_jnya : t =           0x1000da5  (* U+0DA5 SINHALA TAALUJA SANYOOGA NAASIKYAYA *)
let _Sinh_nja : t =            0x1000da6  (* U+0DA6 SINHALA SANYAKA JAYANNA *)
let _Sinh_tta : t =            0x1000da7  (* U+0DA7 SINHALA TTAYANNA *)
let _Sinh_ttha : t =           0x1000da8  (* U+0DA8 SINHALA MAHA. TTAYANNA *)
let _Sinh_dda : t =            0x1000da9  (* U+0DA9 SINHALA DDAYANNA *)
let _Sinh_ddha : t =           0x1000daa  (* U+0DAA SINHALA MAHA. DDAYANNA *)
let _Sinh_nna : t =            0x1000dab  (* U+0DAB SINHALA MUURDHAJA NAYANNA *)
let _Sinh_ndda : t =           0x1000dac  (* U+0DAC SINHALA SANYAKA DDAYANNA *)
let _Sinh_tha : t =            0x1000dad  (* U+0DAD SINHALA TAYANNA *)
let _Sinh_thha : t =           0x1000dae  (* U+0DAE SINHALA MAHA. TAYANNA *)
let _Sinh_dha : t =            0x1000daf  (* U+0DAF SINHALA DAYANNA *)
let _Sinh_dhha : t =           0x1000db0  (* U+0DB0 SINHALA MAHA. DAYANNA *)
let _Sinh_na : t =             0x1000db1  (* U+0DB1 SINHALA DANTAJA NAYANNA *)
let _Sinh_ndha : t =           0x1000db3  (* U+0DB3 SINHALA SANYAKA DAYANNA *)
let _Sinh_pa : t =             0x1000db4  (* U+0DB4 SINHALA PAYANNA *)
let _Sinh_pha : t =            0x1000db5  (* U+0DB5 SINHALA MAHA. PAYANNA *)
let _Sinh_ba : t =             0x1000db6  (* U+0DB6 SINHALA BAYANNA *)
let _Sinh_bha : t =            0x1000db7  (* U+0DB7 SINHALA MAHA. BAYANNA *)
let _Sinh_ma : t =             0x1000db8  (* U+0DB8 SINHALA MAYANNA *)
let _Sinh_mba : t =            0x1000db9  (* U+0DB9 SINHALA AMBA BAYANNA *)
let _Sinh_ya : t =             0x1000dba  (* U+0DBA SINHALA YAYANNA *)
let _Sinh_ra : t =             0x1000dbb  (* U+0DBB SINHALA RAYANNA *)
let _Sinh_la : t =             0x1000dbd  (* U+0DBD SINHALA DANTAJA LAYANNA *)
let _Sinh_va : t =             0x1000dc0  (* U+0DC0 SINHALA VAYANNA *)
let _Sinh_sha : t =            0x1000dc1  (* U+0DC1 SINHALA TAALUJA SAYANNA *)
let _Sinh_ssha : t =           0x1000dc2  (* U+0DC2 SINHALA MUURDHAJA SAYANNA *)
let _Sinh_sa : t =             0x1000dc3  (* U+0DC3 SINHALA DANTAJA SAYANNA *)
let _Sinh_ha : t =             0x1000dc4  (* U+0DC4 SINHALA HAYANNA *)
let _Sinh_lla : t =            0x1000dc5  (* U+0DC5 SINHALA MUURDHAJA LAYANNA *)
let _Sinh_fa : t =             0x1000dc6  (* U+0DC6 SINHALA FAYANNA *)
let _Sinh_al : t =             0x1000dca  (* U+0DCA SINHALA AL-LAKUNA *)
let _Sinh_aa2 : t =            0x1000dcf  (* U+0DCF SINHALA AELA-PILLA *)
let _Sinh_ae2 : t =            0x1000dd0  (* U+0DD0 SINHALA AEDA-PILLA *)
let _Sinh_aee2 : t =           0x1000dd1  (* U+0DD1 SINHALA DIGA AEDA-PILLA *)
let _Sinh_i2 : t =             0x1000dd2  (* U+0DD2 SINHALA IS-PILLA *)
let _Sinh_ii2 : t =            0x1000dd3  (* U+0DD3 SINHALA DIGA IS-PILLA *)
let _Sinh_u2 : t =             0x1000dd4  (* U+0DD4 SINHALA PAA-PILLA *)
let _Sinh_uu2 : t =            0x1000dd6  (* U+0DD6 SINHALA DIGA PAA-PILLA *)
let _Sinh_ru2 : t =            0x1000dd8  (* U+0DD8 SINHALA GAETTA-PILLA *)
let _Sinh_e2 : t =             0x1000dd9  (* U+0DD9 SINHALA KOMBUVA *)
let _Sinh_ee2 : t =            0x1000dda  (* U+0DDA SINHALA DIGA KOMBUVA *)
let _Sinh_ai2 : t =            0x1000ddb  (* U+0DDB SINHALA KOMBU DEKA *)
let _Sinh_o2 : t =             0x1000ddc  (* U+0DDC SINHALA KOMBUVA HAA AELA-PILLA*)
let _Sinh_oo2 : t =            0x1000ddd  (* U+0DDD SINHALA KOMBUVA HAA DIGA AELA-PILLA*)
let _Sinh_au2 : t =            0x1000dde  (* U+0DDE SINHALA KOMBUVA HAA GAYANUKITTA *)
let _Sinh_lu2 : t =            0x1000ddf  (* U+0DDF SINHALA GAYANUKITTA *)
let _Sinh_ruu2 : t =           0x1000df2  (* U+0DF2 SINHALA DIGA GAETTA-PILLA *)
let _Sinh_luu2 : t =           0x1000df3  (* U+0DF3 SINHALA DIGA GAYANUKITTA *)
let _Sinh_kunddaliya : t =     0x1000df4  (* U+0DF4 SINHALA KUNDDALIYA *)
(*
 * XFree86 vendor specific keysyms.
 *
 * The XFree86 keysym range is 0x10080001 - 0x1008FFFF.
 *
 * X.Org will not be adding to the XF86 set of keysyms, though they have
 * been adopted and are considered a "standard" part of X keysym definitions.
 * XFree86 never properly commented these keysyms, so we have done our
 * best to explain the semantic meaning of these keys.
 *
 * XFree86 has removed their mail archives of the period, that might have
 * shed more light on some of these definitions. Until/unless we resurrect
 * these archives, these are from memory and usage.
 *)

(*
 * ModeLock
 *
 * This one is old, and not really used any more since XKB offers this
 * functionality.
 *)

let _XF86ModeLock : t = 		0x1008FF01	(* Mode Switch Lock *)

(* Backlight controls. *)
let _XF86MonBrightnessUp : t =    0x1008FF02  (* Monitor/panel brightness *)
let _XF86MonBrightnessDown : t =  0x1008FF03  (* Monitor/panel brightness *)
let _XF86KbdLightOnOff : t =      0x1008FF04  (* Keyboards may be lit     *)
let _XF86KbdBrightnessUp : t =    0x1008FF05  (* Keyboards may be lit     *)
let _XF86KbdBrightnessDown : t =  0x1008FF06  (* Keyboards may be lit     *)

(*
 * Keys found on some "Internet" keyboards.
 *)
let _XF86Standby : t = 		0x1008FF10   (* System into standby mode   *)
let _XF86AudioLowerVolume : t = 	0x1008FF11   (* Volume control down        *)
let _XF86AudioMute : t = 	0x1008FF12   (* Mute sound from the system *)
let _XF86AudioRaiseVolume : t = 	0x1008FF13   (* Volume control up          *)
let _XF86AudioPlay : t = 	0x1008FF14   (* Start playing of audio >   *)
let _XF86AudioStop : t = 	0x1008FF15   (* Stop playing audio         *)
let _XF86AudioPrev : t = 	0x1008FF16   (* Previous track             *)
let _XF86AudioNext : t = 	0x1008FF17   (* Next track                 *)
let _XF86HomePage : t = 		0x1008FF18   (* Display user's home page   *)
let _XF86Mail : t = 		0x1008FF19   (* Invoke user's mail program *)
let _XF86Start : t = 		0x1008FF1A   (* Start application          *)
let _XF86Search : t = 		0x1008FF1B   (* Search                     *)
let _XF86AudioRecord : t = 	0x1008FF1C   (* Record audio application   *)

(* These are sometimes found on PDA's (e.g. Palm, PocketPC or elsewhere)   *)
let _XF86Calculator : t = 	0x1008FF1D   (* Invoke calculator program  *)
let _XF86Memo : t = 		0x1008FF1E   (* Invoke Memo taking program *)
let _XF86ToDoList : t = 		0x1008FF1F   (* Invoke To Do List program  *)
let _XF86Calendar : t = 		0x1008FF20   (* Invoke Calendar program    *)
let _XF86PowerDown : t = 	0x1008FF21   (* Deep sleep the system      *)
let _XF86ContrastAdjust : t = 	0x1008FF22   (* Adjust screen contrast     *)
let _XF86RockerUp : t = 		0x1008FF23   (* Rocker switches exist up   *)
let _XF86RockerDown : t = 	0x1008FF24   (* and down                   *)
let _XF86RockerEnter : t = 	0x1008FF25   (* and let you press them     *)

(* Some more "Internet" keyboard symbols *)
let _XF86Back : t = 		0x1008FF26   (* Like back on a browser     *)
let _XF86Forward : t = 		0x1008FF27   (* Like forward on a browser  *)
let _XF86Stop : t = 		0x1008FF28   (* Stop current operation     *)
let _XF86Refresh : t = 		0x1008FF29   (* Refresh the page           *)
let _XF86PowerOff : t = 		0x1008FF2A   (* Power off system entirely  *)
let _XF86WakeUp : t = 		0x1008FF2B   (* Wake up system from sleep  *)
let _XF86Eject : t =             0x1008FF2C   (* Eject device (e.g. DVD)    *)
let _XF86ScreenSaver : t =       0x1008FF2D   (* Invoke screensaver         *)
let _XF86WWW : t =               0x1008FF2E   (* Invoke web browser         *)
let _XF86Sleep : t =             0x1008FF2F   (* Put system to sleep        *)
let _XF86Favorites : t = 	0x1008FF30   (* Show favorite locations    *)
let _XF86AudioPause : t = 	0x1008FF31   (* Pause audio playing        *)
let _XF86AudioMedia : t = 	0x1008FF32   (* Launch media collection app *)
let _XF86MyComputer : t = 	0x1008FF33   (* Display "My Computer" window *)
let _XF86VendorHome : t = 	0x1008FF34   (* Display vendor home web site *)
let _XF86LightBulb : t = 	0x1008FF35   (* Light bulb keys exist       *)
let _XF86Shop : t = 		0x1008FF36   (* Display shopping web site   *)
let _XF86History : t = 		0x1008FF37   (* Show history of web surfing *)
let _XF86OpenURL : t = 		0x1008FF38   (* Open selected URL           *)
let _XF86AddFavorite : t = 	0x1008FF39   (* Add URL to favorites list   *)
let _XF86HotLinks : t = 		0x1008FF3A   (* Show "hot" links            *)
let _XF86BrightnessAdjust : t = 	0x1008FF3B   (* Invoke brightness adj. UI   *)
let _XF86Finance : t = 		0x1008FF3C   (* Display financial site      *)
let _XF86Community : t = 	0x1008FF3D   (* Display user's community    *)
let _XF86AudioRewind : t = 	0x1008FF3E   (* "rewind" audio track        *)
let _XF86BackForward : t = 	0x1008FF3F   (* ??? *)
let _XF86Launch0 : t = 		0x1008FF40   (* Launch Application          *)
let _XF86Launch1 : t = 		0x1008FF41   (* Launch Application          *)
let _XF86Launch2 : t = 		0x1008FF42   (* Launch Application          *)
let _XF86Launch3 : t = 		0x1008FF43   (* Launch Application          *)
let _XF86Launch4 : t = 		0x1008FF44   (* Launch Application          *)
let _XF86Launch5 : t = 		0x1008FF45   (* Launch Application          *)
let _XF86Launch6 : t = 		0x1008FF46   (* Launch Application          *)
let _XF86Launch7 : t = 		0x1008FF47   (* Launch Application          *)
let _XF86Launch8 : t = 		0x1008FF48   (* Launch Application          *)
let _XF86Launch9 : t = 		0x1008FF49   (* Launch Application          *)
let _XF86LaunchA : t = 		0x1008FF4A   (* Launch Application          *)
let _XF86LaunchB : t = 		0x1008FF4B   (* Launch Application          *)
let _XF86LaunchC : t = 		0x1008FF4C   (* Launch Application          *)
let _XF86LaunchD : t = 		0x1008FF4D   (* Launch Application          *)
let _XF86LaunchE : t = 		0x1008FF4E   (* Launch Application          *)
let _XF86LaunchF : t = 		0x1008FF4F   (* Launch Application          *)

let _XF86ApplicationLeft : t = 	0x1008FF50   (* switch to application, left *)
let _XF86ApplicationRight : t = 	0x1008FF51   (* switch to application, right*)
let _XF86Book : t = 		0x1008FF52   (* Launch bookreader           *)
let _XF86CD : t = 		0x1008FF53   (* Launch CD/DVD player        *)
let _XF86Calculater : t = 	0x1008FF54   (* Launch Calculater           *)
let _XF86Clear : t = 		0x1008FF55   (* Clear window, screen        *)
let _XF86Close : t = 		0x1008FF56   (* Close window                *)
let _XF86Copy : t = 		0x1008FF57   (* Copy selection              *)
let _XF86Cut : t = 		0x1008FF58   (* Cut selection               *)
let _XF86Display : t = 		0x1008FF59   (* Output switch key           *)
let _XF86DOS : t = 		0x1008FF5A   (* Launch DOS (emulation)      *)
let _XF86Documents : t = 	0x1008FF5B   (* Open documents window       *)
let _XF86Excel : t = 		0x1008FF5C   (* Launch spread sheet         *)
let _XF86Explorer : t = 		0x1008FF5D   (* Launch file explorer        *)
let _XF86Game : t = 		0x1008FF5E   (* Launch game                 *)
let _XF86Go : t = 		0x1008FF5F   (* Go to URL                   *)
let _XF86iTouch : t = 		0x1008FF60   (* Logitch iTouch- don't use   *)
let _XF86LogOff : t = 		0x1008FF61   (* Log off system              *)
let _XF86Market : t = 		0x1008FF62   (* ??                          *)
let _XF86Meeting : t = 		0x1008FF63   (* enter meeting in calendar   *)
let _XF86MenuKB : t = 		0x1008FF65   (* distingush keyboard from PB *)
let _XF86MenuPB : t = 		0x1008FF66   (* distinuish PB from keyboard *)
let _XF86MySites : t = 		0x1008FF67   (* Favourites                  *)
let _XF86New : t = 		0x1008FF68   (* New (folder, document...    *)
let _XF86News : t = 		0x1008FF69   (* News                        *)
let _XF86OfficeHome : t = 	0x1008FF6A   (* Office home (old Staroffice)*)
let _XF86Open : t = 		0x1008FF6B   (* Open                        *)
let _XF86Option : t = 		0x1008FF6C   (* ?? *)
let _XF86Paste : t = 		0x1008FF6D   (* Paste                       *)
let _XF86Phone : t = 		0x1008FF6E   (* Launch phone; dial number   *)
let _XF86Q : t = 		0x1008FF70   (* Compaq's Q - don't use      *)
let _XF86Reply : t = 		0x1008FF72   (* Reply e.g., mail            *)
let _XF86Reload : t = 		0x1008FF73   (* Reload web page, file, etc. *)
let _XF86RotateWindows : t = 	0x1008FF74   (* Rotate windows e.g. xrandr  *)
let _XF86RotationPB : t = 	0x1008FF75   (* don't use                   *)
let _XF86RotationKB : t = 	0x1008FF76   (* don't use                   *)
let _XF86Save : t = 		0x1008FF77   (* Save (file, document, state *)
let _XF86ScrollUp : t = 		0x1008FF78   (* Scroll window/contents up   *)
let _XF86ScrollDown : t = 	0x1008FF79   (* Scrool window/contentd down *)
let _XF86ScrollClick : t = 	0x1008FF7A   (* Use XKB mousekeys instead   *)
let _XF86Send : t = 		0x1008FF7B   (* Send mail, file, object     *)
let _XF86Spell : t = 		0x1008FF7C   (* Spell checker               *)
let _XF86SplitScreen : t = 	0x1008FF7D   (* Split window or screen      *)
let _XF86Support : t = 		0x1008FF7E   (* Get support (??)            *)
let _XF86TaskPane : t = 		0x1008FF7F   (* Show tasks *)
let _XF86Terminal : t = 		0x1008FF80   (* Launch terminal emulator    *)
let _XF86Tools : t = 		0x1008FF81   (* toolbox of desktop/app.     *)
let _XF86Travel : t = 		0x1008FF82   (* ?? *)
let _XF86UserPB : t = 		0x1008FF84   (* ?? *)
let _XF86User1KB : t = 		0x1008FF85   (* ?? *)
let _XF86User2KB : t = 		0x1008FF86   (* ?? *)
let _XF86Video : t = 		0x1008FF87   (* Launch video player       *)
let _XF86WheelButton : t = 	0x1008FF88   (* button from a mouse wheel *)
let _XF86Word : t = 		0x1008FF89   (* Launch word processor     *)
let _XF86Xfer : t = 		0x1008FF8A
let _XF86ZoomIn : t = 		0x1008FF8B   (* zoom in view, map, etc.   *)
let _XF86ZoomOut : t = 		0x1008FF8C   (* zoom out view, map, etc.  *)

let _XF86Away : t = 		0x1008FF8D   (* mark yourself as away     *)
let _XF86Messenger : t = 	0x1008FF8E   (* as in instant messaging   *)
let _XF86WebCam : t = 		0x1008FF8F   (* Launch web camera app.    *)
let _XF86MailForward : t = 	0x1008FF90   (* Forward in mail           *)
let _XF86Pictures : t = 		0x1008FF91   (* Show pictures             *)
let _XF86Music : t = 		0x1008FF92   (* Launch music application  *)

let _XF86Battery : t = 		0x1008FF93   (* Display battery information *)
let _XF86Bluetooth : t = 	0x1008FF94   (* Enable/disable Bluetooth    *)
let _XF86WLAN : t = 		0x1008FF95   (* Enable/disable WLAN         *)
let _XF86UWB : t = 		0x1008FF96   (* Enable/disable UWB	    *)

let _XF86AudioForward : t = 	0x1008FF97   (* fast-forward audio track    *)
let _XF86AudioRepeat : t = 	0x1008FF98   (* toggle repeat mode          *)
let _XF86AudioRandomPlay : t = 	0x1008FF99   (* toggle shuffle mode         *)
let _XF86Subtitle : t = 		0x1008FF9A   (* cycle through subtitle      *)
let _XF86AudioCycleTrack : t = 	0x1008FF9B   (* cycle through audio tracks  *)
let _XF86CycleAngle : t = 	0x1008FF9C   (* cycle through angles        *)
let _XF86FrameBack : t = 	0x1008FF9D   (* video: go one frame back    *)
let _XF86FrameForward : t = 	0x1008FF9E   (* video: go one frame forward *)
let _XF86Time : t = 		0x1008FF9F   (* display, or shows an entry for time seeking *)
let _XF86Select : t = 		0x1008FFA0   (* Select button on joypads and remotes *)
let _XF86View : t = 		0x1008FFA1   (* Show a view options/properties *)
let _XF86TopMenu : t = 		0x1008FFA2   (* Go to a top-level menu in a video *)

let _XF86Red : t = 		0x1008FFA3   (* Red button                  *)
let _XF86Green : t = 		0x1008FFA4   (* Green button                *)
let _XF86Yellow : t = 		0x1008FFA5   (* Yellow button               *)
let _XF86Blue : t =              0x1008FFA6   (* Blue button                 *)

let _XF86Suspend : t = 		0x1008FFA7   (* Sleep to RAM                *)
let _XF86Hibernate : t = 	0x1008FFA8   (* Sleep to disk               *)
let _XF86TouchpadToggle : t = 	0x1008FFA9   (* Toggle between touchpad/trackstick *)
let _XF86TouchpadOn : t = 	0x1008FFB0   (* The touchpad got switched on *)
let _XF86TouchpadOff : t = 	0x1008FFB1   (* The touchpad got switched off *)

let _XF86AudioMicMute : t = 	0x1008FFB2   (* Mute the Mic from the system *)

let _XF86Keyboard : t = 		0x1008FFB3   (* User defined keyboard related action *)

let _XF86WWAN : t = 		0x1008FFB4   (* Toggle WWAN (LTE, UMTS, etc.) radio *)
let _XF86RFKill : t = 		0x1008FFB5   (* Toggle radios on/off *)

let _XF86AudioPreset : t = 	0x1008FFB6   (* Select equalizer preset, e.g. theatre-mode *)

(* Keys for special action keys (hot keys) *)
(* Virtual terminals on some operating systems *)
let _XF86Switch_VT_1 : t = 	0x1008FE01
let _XF86Switch_VT_2 : t = 	0x1008FE02
let _XF86Switch_VT_3 : t = 	0x1008FE03
let _XF86Switch_VT_4 : t = 	0x1008FE04
let _XF86Switch_VT_5 : t = 	0x1008FE05
let _XF86Switch_VT_6 : t = 	0x1008FE06
let _XF86Switch_VT_7 : t = 	0x1008FE07
let _XF86Switch_VT_8 : t = 	0x1008FE08
let _XF86Switch_VT_9 : t = 	0x1008FE09
let _XF86Switch_VT_10 : t = 	0x1008FE0A
let _XF86Switch_VT_11 : t = 	0x1008FE0B
let _XF86Switch_VT_12 : t = 	0x1008FE0C

let _XF86Ungrab : t = 		0x1008FE20   (* force ungrab               *)
let _XF86ClearGrab : t = 	0x1008FE21   (* kill application with grab *)
let _XF86Next_VMode : t = 	0x1008FE22   (* next video mode available  *)
let _XF86Prev_VMode : t = 	0x1008FE23   (* prev. video mode available *)
let _XF86LogWindowTree : t = 	0x1008FE24   (* print window tree to log   *)
let _XF86LogGrabInfo : t = 	0x1008FE25   (* print all active grabs to log *)
(*
 * Copyright (c) 1991, Oracle and/or its affiliates. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *)
(************************************************************

Copyright 1991, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.

***********************************************************)

(*
 * Floating Accent
 *)

let _SunFA_Grave : t = 		0x1005FF00
let _SunFA_Circum : t = 		0x1005FF01
let _SunFA_Tilde : t = 		0x1005FF02
let _SunFA_Acute : t = 		0x1005FF03
let _SunFA_Diaeresis : t = 	0x1005FF04
let _SunFA_Cedilla : t = 	0x1005FF05

(*
 * Miscellaneous Functions
 *)

let _SunF36 : t = 		0x1005FF10	(* Labeled F11 *)
let _SunF37 : t = 		0x1005FF11	(* Labeled F12 *)

let _SunSys_Req : t =    	0x1005FF60
let _SunPrint_Screen : t = 	0x0000FF61	(* Same as XK_Print *)

(*
 * International & Multi-Key Character Composition
 *)

let _SunCompose : t = 		0x0000FF20	(* Same as XK_Multi_key *)
let _SunAltGraph : t = 		0x0000FF7E	(* Same as XK_Mode_switch *)

(*
 * Cursor Control
 *)

let _SunPageUp : t = 		0x0000FF55 	(* Same as XK_Prior *)
let _SunPageDown : t = 		0x0000FF56	(* Same as XK_Next *)

(*
 * Open Look Functions
 *)

let _SunUndo : t = 		0x0000FF65	(* Same as XK_Undo *)
let _SunAgain : t = 		0x0000FF66	(* Same as XK_Redo *)
let _SunFind : t = 		0x0000FF68	(* Same as XK_Find *)
let _SunStop : t = 		0x0000FF69	(* Same as XK_Cancel *)
let _SunProps : t = 		0x1005FF70
let _SunFront : t = 		0x1005FF71
let _SunCopy : t = 		0x1005FF72
let _SunOpen : t = 		0x1005FF73
let _SunPaste : t = 		0x1005FF74
let _SunCut : t = 		0x1005FF75

let _SunPowerSwitch : t = 		0x1005FF76
let _SunAudioLowerVolume : t = 		0x1005FF77
let _SunAudioMute : t = 			0x1005FF78
let _SunAudioRaiseVolume : t = 		0x1005FF79
let _SunVideoDegauss : t = 		0x1005FF7A
let _SunVideoLowerBrightness : t = 	0x1005FF7B
let _SunVideoRaiseBrightness : t = 	0x1005FF7C
let _SunPowerSwitchShift : t = 		0x1005FF7D
(***********************************************************

Copyright 1988, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall not be
used in advertising or otherwise to promote the sale, use or other dealings
in this Software without prior written authorization from The Open Group.


Copyright 1988 by Digital Equipment Corporation, Maynard, Massachusetts.

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its 
documentation for any purpose and without fee is hereby granted, 
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in 
supporting documentation, and that the name of Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.  

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

******************************************************************)

(*
 * DEC private keysyms
 * (29th bit set)
 *)

(* two-key compose sequence initiators, chosen to map to Latin1 characters *)

let _Dring_accent : t =          0x1000FEB0
let _Dcircumflex_accent : t =    0x1000FE5E
let _Dcedilla_accent : t =       0x1000FE2C
let _Dacute_accent : t =         0x1000FE27
let _Dgrave_accent : t =         0x1000FE60
let _Dtilde : t =                0x1000FE7E
let _Ddiaeresis : t =            0x1000FE22

(* special keysym for LK2** "Remove" key on editing keypad *)

let _DRemove : t = 	0x1000FF00   (* Remove *)
(*

Copyright 1987, 1998  The Open Group

Permission to use, copy, modify, distribute, and sell this software and its
documentation for any purpose is hereby granted without fee, provided that
the above copyright notice appear in all copies and that both that
copyright notice and this permission notice appear in supporting
documentation.

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE OPEN GROUP BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

Except as contained in this notice, the name of The Open Group shall
not be used in advertising or otherwise to promote the sale, use or
other dealings in this Software without prior written authorization
from The Open Group.

Copyright 1987 by Digital Equipment Corporation, Maynard, Massachusetts,

                        All Rights Reserved

Permission to use, copy, modify, and distribute this software and its
documentation for any purpose and without fee is hereby granted,
provided that the above copyright notice appear in all copies and that
both that copyright notice and this permission notice appear in
supporting documentation, and that the names of Hewlett Packard
or Digital not be
used in advertising or publicity pertaining to distribution of the
software without specific, written prior permission.

DIGITAL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
DIGITAL BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
SOFTWARE.

HEWLETT-PACKARD MAKES NO WARRANTY OF ANY KIND WITH REGARD
TO THIS SOFWARE, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  Hewlett-Packard shall not be liable for errors
contained herein or direct, indirect, special, incidental or
consequential damages in connection with the furnishing,
performance, or use of this material.

*)



let _hpClearLine : t = 		0x1000FF6F
let _hpInsertLine : t = 		0x1000FF70
let _hpDeleteLine : t = 		0x1000FF71
let _hpInsertChar : t = 		0x1000FF72
let _hpDeleteChar : t = 		0x1000FF73
let _hpBackTab : t = 		0x1000FF74
let _hpKP_BackTab : t = 		0x1000FF75
let _hpModelock1 : t = 		0x1000FF48
let _hpModelock2 : t = 		0x1000FF49
let _hpReset : t = 		0x1000FF6C
let _hpSystem : t = 		0x1000FF6D
let _hpUser : t = 		0x1000FF6E
let _hpmute_acute : t = 		0x100000A8
let _hpmute_grave : t = 		0x100000A9
let _hpmute_asciicircum : t = 	0x100000AA
let _hpmute_diaeresis : t = 	0x100000AB
let _hpmute_asciitilde : t = 	0x100000AC
let _hplira : t = 		0x100000AF
let _hpguilder : t = 		0x100000BE
let _hpYdiaeresis : t = 		0x100000EE
let _hpIO : t = 			0x100000EE
let _hplongminus : t = 		0x100000F6
let _hpblock : t = 		0x100000FC



let _osfCopy : t = 		0x1004FF02
let _osfCut : t = 		0x1004FF03
let _osfPaste : t = 		0x1004FF04
let _osfBackTab : t = 		0x1004FF07
let _osfBackSpace : t = 		0x1004FF08
let _osfClear : t = 		0x1004FF0B
let _osfEscape : t = 		0x1004FF1B
let _osfAddMode : t = 		0x1004FF31
let _osfPrimaryPaste : t = 	0x1004FF32
let _osfQuickPaste : t = 	0x1004FF33
let _osfPageLeft : t = 		0x1004FF40
let _osfPageUp : t = 		0x1004FF41
let _osfPageDown : t = 		0x1004FF42
let _osfPageRight : t = 		0x1004FF43
let _osfActivate : t = 		0x1004FF44
let _osfMenuBar : t = 		0x1004FF45
let _osfLeft : t = 		0x1004FF51
let _osfUp : t = 		0x1004FF52
let _osfRight : t = 		0x1004FF53
let _osfDown : t = 		0x1004FF54
let _osfEndLine : t = 		0x1004FF57
let _osfBeginLine : t = 		0x1004FF58
let _osfEndData : t = 		0x1004FF59
let _osfBeginData : t = 		0x1004FF5A
let _osfPrevMenu : t = 		0x1004FF5B
let _osfNextMenu : t = 		0x1004FF5C
let _osfPrevField : t = 		0x1004FF5D
let _osfNextField : t = 		0x1004FF5E
let _osfSelect : t = 		0x1004FF60
let _osfInsert : t = 		0x1004FF63
let _osfUndo : t = 		0x1004FF65
let _osfMenu : t = 		0x1004FF67
let _osfCancel : t = 		0x1004FF69
let _osfHelp : t = 		0x1004FF6A
let _osfSelectAll : t = 		0x1004FF71
let _osfDeselectAll : t = 	0x1004FF72
let _osfReselect : t = 		0x1004FF73
let _osfExtend : t = 		0x1004FF74
let _osfRestore : t = 		0x1004FF78
let _osfDelete : t = 		0x1004FFFF



(**************************************************************
 * The use of the following macros is deprecated.
 * They are listed below only for backwards compatibility.
 *)
let _Reset : t =                 0x1000FF6C
let _System : t =                0x1000FF6D
let _User : t =                  0x1000FF6E
let _ClearLine : t =             0x1000FF6F
let _InsertLine : t =            0x1000FF70
let _DeleteLine : t =            0x1000FF71
let _InsertChar : t =            0x1000FF72
let _DeleteChar : t =            0x1000FF73
let _BackTab : t =               0x1000FF74
let _KP_BackTab : t =            0x1000FF75
let _Ext16bit_L : t =            0x1000FF76
let _Ext16bit_R : t =            0x1000FF77
let _mute_acute : t =            0x100000a8
let _mute_grave : t =            0x100000a9
let _mute_asciicircum : t =      0x100000aa
let _mute_diaeresis : t =        0x100000ab
let _mute_asciitilde : t =       0x100000ac
let _lira : t =                  0x100000af
let _guilder : t =               0x100000be
let _IO : t =                    0x100000ee
let _longminus : t =             0x100000f6
let _block : t =                 0x100000fc




